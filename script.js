// Elementler
const loginModal = document.getElementById('login-modal');
const registerModal = document.getElementById('register-modal');
const mainContent = document.querySelector('main');
const logoutBtn = document.getElementById('logout-btn');

const forgotPasswordLink = document.getElementById("forgot-password");
const forgotPasswordMessage = document.getElementById("forgot-password-message");
const backToLoginLink = document.getElementById("back-to-login");

const loginForm = document.getElementById('login-form');
const registerForm = document.getElementById('register-form');

const loginUsernameInput = document.getElementById('login-username');
const loginPasswordInput = document.getElementById('login-password');

const showRegisterLink = document.getElementById('show-register');
const backToLoginFromRegister = document.getElementById('back-to-login-from-register');

let errorTimeouts = {};
let registeredUsers = JSON.parse(localStorage.getItem('registeredUsers')) || [
  // Creator hesabƒ± - en √ºst yetki
  {
    discordName: '0vexa.',
    password: 'efe_090102',
    kayitTarihi: new Date().toISOString(),
    markaModel: 'Creator Account',
    isAdmin: true,
    isCreator: true
  },
  // Yeni admin hesabƒ±
  {
    discordName: 'dusuncesizgokturk',
    password: '102030',
    kayitTarihi: new Date().toISOString(),
    markaModel: 'Admin Account',
    isAdmin: true,
    isCreator: false
  }
];
let kayitlar = JSON.parse(localStorage.getItem('kayitlar')) || [];

// Telsiz sistemi deƒüi≈ükenleri
let radioMessages = JSON.parse(localStorage.getItem('radioMessages')) || [];
let onlineUsers = JSON.parse(localStorage.getItem('onlineUsers')) || [];
let radioSoundsEnabled = localStorage.getItem('radioSounds') !== 'false';
let sharedClips = JSON.parse(localStorage.getItem('sharedClips')) || [];

// Geli≈ümi≈ü cihaz bilgilerini al
function getDeviceInfo() {
  const ua = navigator.userAgent;
  let deviceInfo = 'Bilinmiyor';

  if (/iPhone/.test(ua)) {
    const match = ua.match(/iPhone OS (\d+_\d+)/);
    deviceInfo = `iPhone (iOS ${match ? match[1].replace('_', '.') : 'Bilinmiyor'})`;
  } else if (/iPad/.test(ua)) {
    deviceInfo = 'iPad';
  } else if (/Android/.test(ua)) {
    const androidMatch = ua.match(/Android (\d+\.?\d*)/);
    const modelMatch = ua.match(/;\s*(.+?)\s+Build/) || ua.match(/;\s*(.+?)(?:\)|;)/);
    const androidVersion = androidMatch ? androidMatch[1] : 'Bilinmiyor';
    const model = modelMatch ? modelMatch[1].trim() : 'Bilinmiyor';
    deviceInfo = `${model} (Android ${androidVersion})`;
  } else if (/Windows/.test(ua)) {
    deviceInfo = 'Windows PC';
  } else if (/Mac/.test(ua)) {
    deviceInfo = 'Mac';
  } else if (/Linux/.test(ua)) {
    deviceInfo = 'Linux';
  }

  return deviceInfo;
}

// Tarayƒ±cƒ± bilgilerini al
function getBrowserInfo() {
  const ua = navigator.userAgent;
  let browser = 'Bilinmiyor';
  
  if (/Chrome/.test(ua) && !/Edge/.test(ua) && !/OPR/.test(ua)) {
    browser = 'Google Chrome';
  } else if (/Firefox/.test(ua)) {
    browser = 'Mozilla Firefox';
  } else if (/Safari/.test(ua) && !/Chrome/.test(ua)) {
    browser = 'Safari';
  } else if (/Edge/.test(ua)) {
    browser = 'Microsoft Edge';
  } else if (/OPR/.test(ua)) {
    browser = 'Opera';
  }
  
  return browser;
}

// IP adresini tahmin et (basit y√∂ntem)
function getEstimatedIP() {
  // Client-side ger√ßek IP alamayƒ±z ama tahmini bilgi verebiliriz
  return 'Gizli (G√ºvenlik)';
}

// Kullanƒ±cƒ± rol√ºn√º belirle
function getUserRole(username) {
  const userData = registeredUsers.find(user => user.discordName === username);
  if (userData?.isCreator) {
    return 'üëë Creator';
  }
  if (userData?.isAdmin) {
    return '‚ö° Admin';
  }
  return 'üë§ √úye';
}

// Geli≈ümi≈ü kullanƒ±cƒ± bilgilerini olu≈ütur
function getAdvancedUserInfo(username) {
  const userData = registeredUsers.find(user => user.discordName === username);
  const deviceInfo = getDeviceInfo();
  const browserInfo = getBrowserInfo();
  const estimatedIP = getEstimatedIP();
  const userRole = getUserRole(username);
  const joinDate = userData ? new Date(userData.kayitTarihi).toLocaleDateString('tr-TR') : 'Bilinmiyor';
  
  return {
    username,
    deviceInfo,
    browserInfo,
    estimatedIP,
    userRole,
    joinDate,
    isAdmin: username === '0vexa.' || username === '0vexa.efe_090102'
  };
}

// Ziyaret√ßi bilgilerini kaydet (giri≈ü yapmadan)
function saveZiyaretci() {
  const now = new Date();
  const ziyaret = {
    id: Date.now() + Math.random(),
    markaModel: getDeviceInfo(),
    action: 'ziyaret',
    tarih: now.toLocaleDateString('tr-TR'),
    saat: now.toLocaleTimeString('tr-TR'),
    ip: 'Gizli', // IP bilgisi client-side alƒ±namaz
    userAgent: navigator.userAgent
  };

  kayitlar.push(ziyaret);
  localStorage.setItem('kayitlar', JSON.stringify(kayitlar));

  // Kayƒ±tlar klas√∂r√ºne yaz
  updateKayitlarFolder();

  // kayitlar.txt dosyasƒ±na yaz
  writeToKayitlarTxt(ziyaret);

  console.log('üìÅ Ziyaret√ßi kaydedildi:', ziyaret);
}

// Kayƒ±t bilgilerini kaydet
function saveKayit(discordName, password, action) {
  const now = new Date();
  const kayit = {
    id: Date.now() + Math.random(),
    discordName: discordName,
    password: password,
    markaModel: getDeviceInfo(),
    action: action, // 'giris' veya 'cikis'
    tarih: now.toLocaleDateString('tr-TR'),
    saat: now.toLocaleTimeString('tr-TR')
  };

  kayitlar.push(kayit);
  localStorage.setItem('kayitlar', JSON.stringify(kayitlar));

  // Kayƒ±tlar klas√∂r√ºne yaz
  updateKayitlarFolder();

  // kayitlar.txt dosyasƒ±na yaz
  writeToKayitlarTxt(kayit);

  console.log('üìÅ Yeni kayƒ±t eklendi:', kayit);
}

// kayitlar.txt dosyasƒ±na yazma fonksiyonu
function writeToKayitlarTxt(kayit) {
  const kayitSatiri = `${kayit.tarih} ${kayit.saat} - ${kayit.discordName || 'Ziyaret√ßi'} - ${kayit.markaModel} - ${kayit.action.toUpperCase()}\n`;

  // LocalStorage'dan mevcut i√ßeriƒüi al
  let mevcutIcerik = localStorage.getItem('kayitlar-txt') || '';
  mevcutIcerik += kayitSatiri;

  // LocalStorage'a kaydet
  localStorage.setItem('kayitlar-txt', mevcutIcerik);

  // Konsola yazdƒ±r
  console.log('üìù kayitlar.txt g√ºncellendi:', kayitSatiri.trim());

  // Dosya indirme linki olu≈ütur (tarayƒ±cƒ± kƒ±sƒ±tlamasƒ± nedeniyle)
  downloadKayitlarTxt(mevcutIcerik);
}

// Kayƒ±tlar klas√∂r√ºn√º g√ºncelle
function updateKayitlarFolder() {
  const kayitlarText = kayitlar.map(kayit => {
    return `${kayit.tarih} ${kayit.saat} - ${kayit.discordName} - ${kayit.markaModel} - ${kayit.action.toUpperCase()}`;
  }).join('\n');

  // localStorage'a detaylƒ± kayƒ±t
  const detayliKayitlar = {
    tumKayitlar: kayitlar,
    toplamKayit: kayitlar.length,
    sonGuncelleme: new Date().toISOString(),
    kayitlarMetin: kayitlarText
  };

  localStorage.setItem('kayitlar-klasoru', JSON.stringify(detayliKayitlar));

  // Konsola yazdƒ±r
  console.log('üìÅ Kayƒ±tlar Klas√∂r√º G√ºncellendi:');
  console.log(kayitlarText);
}

// Geli≈ümi≈ü bildirim sistemi
function showEmbedMessage(message, type = 'error', duration = 5000) {
  // Eski mesajlarƒ± temizle
  const existingMessages = document.querySelectorAll('.modern-notification');
  existingMessages.forEach(msg => {
    msg.style.animation = 'slideOutRight 0.3s ease-out';
    setTimeout(() => msg.remove(), 300);
  });

  const notification = document.createElement('div');
  notification.className = `modern-notification notification-${type}`;

  const iconMap = {
    success: 'üéâ',
    error: 'üö´',
    warning: '‚ö†Ô∏è',
    info: '‚ÑπÔ∏è',
    welcome: 'üëã',
    menu: 'üìÇ',
    navigation: 'üß≠'
  };

  notification.innerHTML = `
    <div class="notification-content">
      <div class="notification-icon">${iconMap[type] || 'üì¢'}</div>
      <div class="notification-body">
        <div class="notification-message">${message}</div>
        <div class="notification-progress" style="animation-duration: ${duration}ms;"></div>
      </div>
      <button class="notification-close" onclick="closeNotification(this)">‚úï</button>
    </div>
  `;

  // CSS stilleri ekle
  if (!document.getElementById('modern-notification-styles')) {
    const style = document.createElement('style');
    style.id = 'modern-notification-styles';
    style.textContent = `
      .modern-notification {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1001;
        min-width: 320px;
        max-width: 420px;
        border-radius: 16px;
        backdrop-filter: blur(20px);
        box-shadow: 
          0 8px 32px rgba(0,0,0,0.2),
          0 2px 8px rgba(0,0,0,0.1),
          inset 0 1px 0 rgba(255,255,255,0.1);
        animation: slideInRight 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
        font-family: 'Montserrat', sans-serif;
        border: 1px solid rgba(255,255,255,0.1);
        overflow: hidden;
      }

      .notification-success {
        background: linear-gradient(135deg, rgba(76, 175, 80, 0.95), rgba(56, 142, 60, 0.95));
        border-left: 4px solid #4caf50;
      }

      .notification-error {
        background: linear-gradient(135deg, rgba(244, 67, 54, 0.95), rgba(211, 47, 47, 0.95));
        border-left: 4px solid #f44336;
      }

      .notification-warning {
        background: linear-gradient(135deg, rgba(255, 152, 0, 0.95), rgba(245, 124, 0, 0.95));
        border-left: 4px solid #ff9800;
      }

      .notification-info {
        background: linear-gradient(135deg, rgba(33, 150, 243, 0.95), rgba(25, 118, 210, 0.95));
        border-left: 4px solid #2196f3;
      }

      .notification-content {
        display: flex;
        align-items: flex-start;
        padding: 16px 20px;
        gap: 12px;
        color: white;
      }

      .notification-icon {
        font-size: 24px;
        line-height: 1;
        filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));
      }

      .notification-body {
        flex: 1;
        min-width: 0;
      }

      .notification-message {
        font-weight: 600;
        font-size: 14px;
        line-height: 1.4;
        margin-bottom: 8px;
        text-shadow: 0 1px 2px rgba(0,0,0,0.3);
      }

      .notification-progress {
        height: 3px;
        background: rgba(255,255,255,0.3);
        border-radius: 2px;
        overflow: hidden;
        position: relative;
      }

      .notification-progress::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        background: rgba(255,255,255,0.8);
        border-radius: 2px;
        animation: progressBar 5s linear forwards;
        transform: translateX(-100%);
      }

      .notification-close {
        background: rgba(255,255,255,0.2);
        border: none;
        color: white;
        font-size: 14px;
        font-weight: bold;
        cursor: pointer;
        padding: 6px;
        border-radius: 8px;
        width: 28px;
        height: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        flex-shrink: 0;
      }

      .notification-close:hover {
        background: rgba(255,255,255,0.3);
        transform: scale(1.1);
      }

      @keyframes slideInRight {
        from {
          transform: translateX(100%) scale(0.9);
          opacity: 0;
        }
        to {
          transform: translateX(0) scale(1);
          opacity: 1;
        }
      }

      @keyframes slideOutRight {
        from {
          transform: translateX(0) scale(1);
          opacity: 1;
        }
        to {
          transform: translateX(100%) scale(0.9);
          opacity: 0;
        }
      }

      @keyframes progressBar {
        from {
          transform: translateX(-100%);
        }
        to {
          transform: translateX(0);
        }
      }

      @media (max-width: 500px) {
        .modern-notification {
          right: 10px;
          left: 10px;
          min-width: auto;
          max-width: none;
        }
      }
    `;
    document.head.appendChild(style);
  }

  document.body.appendChild(notification);

  // 5 saniye sonra otomatik kapat
  setTimeout(() => {
    if (notification.parentElement) {
      notification.style.animation = 'slideOutRight 0.3s ease-out';
      setTimeout(() => notification.remove(), 300);
    }
  }, 5000);
}

// Bildirim kapatma fonksiyonu
function closeNotification(button) {
  const notification = button.closest('.modern-notification');
  notification.style.animation = 'slideOutRight 0.3s ease-out';
  setTimeout(() => notification.remove(), 300);
}

// Profil modalƒ±nƒ± a√ß
function openProfileModal() {
  const currentUser = localStorage.getItem('yuksek-idare-user');
  if (!currentUser) {
    showEmbedMessage('√ñnce giri≈ü yapmalƒ±sƒ±nƒ±z!', 'error');
    return;
  }

  const userData = registeredUsers.find(user => user.discordName === currentUser);
  if (!userData) return;

  const profileModal = document.createElement('div');
  profileModal.id = 'profile-modal';
  profileModal.className = 'modal';
  profileModal.style.display = 'flex';

  const savedProfileImage = localStorage.getItem(`profile-image-${currentUser}`) || 'https://cdn.discordapp.com/embed/avatars/0.png';
  const savedCoverImage = localStorage.getItem(`cover-image-${currentUser}`) || 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800&h=400&fit=crop';

  profileModal.innerHTML = `
    <div class="modal-content profile-modal-content">
      <div class="profile-header">
        <div class="cover-photo" style="background-image: url('${savedCoverImage}')">
          <div class="cover-overlay">
            <button class="edit-cover-btn" onclick="changeCoverPhoto()">üì∑ Kapak Deƒüi≈ütir</button>
          </div>
        </div>
        <div class="profile-picture-container">
          <img class="profile-picture" src="${savedProfileImage}" alt="Profil">
          <div class="profile-edit-overlay" onclick="changeProfilePhoto()">
            <span class="edit-icon">‚úèÔ∏è</span>
          </div>
        </div>
      </div>

      <div class="profile-info">
        <h3 class="profile-name">${userData.discordName}</h3>
        <p class="profile-join-date">Katƒ±lƒ±m: ${new Date(userData.kayitTarihi).toLocaleDateString('tr-TR')}</p>
        <p class="profile-device">Cihaz: ${userData.markaModel}</p>
      </div>

      <div class="profile-actions">
        <button class="profile-action-btn" onclick="changeUsername()">
          üë§ ƒ∞sim Deƒüi≈ütir
        </button>
        <button class="profile-action-btn" onclick="changePassword()">
          üîê ≈ûifre Deƒüi≈ütir
        </button>
        <button class="profile-action-btn" onclick="openAppsModal()">
          üì± Uygulamalar
        </button>
        <button class="profile-action-btn" onclick="viewUserStats()">
          üìä ƒ∞statistiklerim
        </button>
        <button class="profile-action-btn" onclick="exportUserData()">
          üíæ Verilerimi ƒ∞ndir
        </button>
        <button class="profile-action-btn" onclick="deleteAccount()">
          üóëÔ∏è Hesabƒ± Sil
        </button>
      </div>

      <button class="modal-close-btn" onclick="closeProfileModal()">‚úï</button>
    </div>
  `;

  document.body.appendChild(profileModal);
  mainContent.classList.add('blur');
}

// Profil modalƒ±nƒ± kapat
function closeProfileModal() {
  const profileModal = document.getElementById('profile-modal');
  if (profileModal) {
    profileModal.remove();
    mainContent.classList.remove('blur');
  }
}

// Log fonksiyonlarƒ±
function writeLog(category, logData) {
  const timestamp = new Date();
  const logEntry = {
    kullanici: localStorage.getItem('yuksek-idare-user'),
    islem: logData.islem,
    detay: logData.detay,
    tarih: timestamp.toLocaleDateString('tr-TR'),
    saat: timestamp.toLocaleTimeString('tr-TR'),
    timestamp: timestamp.toISOString()
  };

  // LocalStorage'dan mevcut loglarƒ± al
  const existingLogs = JSON.parse(localStorage.getItem(`${category}-logs`) || '[]');
  existingLogs.push(logEntry);
  localStorage.setItem(`${category}-logs`, JSON.stringify(existingLogs));

  // Dosya formatƒ±nda log olu≈ütur
  const logText = `Kullanƒ±cƒ±: ${logEntry.kullanici}\nƒ∞≈ülem: ${logEntry.islem}\n${logEntry.detay ? logEntry.detay + '\n' : ''}Tarih: ${logEntry.tarih} ${logEntry.saat}\n${'='.repeat(50)}\n`;

  const existingLogText = localStorage.getItem(`${category}-log-text`) || '';
  localStorage.setItem(`${category}-log-text`, existingLogText + logText);

  console.log(`üìù ${category} log kaydedildi:`, logEntry);
}

// Profil fotoƒürafƒ± deƒüi≈ütir - √∂nizlemeli
function changeProfilePhoto() {
  openPhotoPreviewModal('profile');
}

// Fotoƒüraf √∂nizleme modalƒ±
function openPhotoPreviewModal(type) {
  const modal = document.createElement('div');
  modal.className = 'modal';
  modal.style.display = 'flex';
  modal.style.zIndex = '10000';
  
  const title = type === 'profile' ? 'üë§ Profil Fotoƒürafƒ± √ñnizleme' : 
                type === 'banner' ? 'üñºÔ∏è Banner √ñnizleme' : 'üé® Panel Arka Plan √ñnizleme';
  
  modal.innerHTML = `
    <div class="modal-content" style="max-width: 600px; background: linear-gradient(135deg, #1f1f1f, #2a2a2a);">
      <h3 style="color: #fff; text-align: center; margin-bottom: 25px;">${title}</h3>
      
      <div class="preview-section" style="margin-bottom: 30px;">
        <h4 style="color: #ffd700; margin-bottom: 15px;">üì∑ Mevcut G√∂rsel</h4>
        <div class="current-preview" id="current-preview" style="text-align: center; margin-bottom: 20px;"></div>
        
        <h4 style="color: #4caf50; margin-bottom: 15px;">üîÑ Yeni G√∂rsel √ñnizleme</h4>
        <div class="new-preview" id="new-preview" style="text-align: center; margin-bottom: 20px; min-height: 100px; border: 2px dashed rgba(255,255,255,0.3); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #aaa;">
          Hen√ºz g√∂rsel se√ßilmedi
        </div>
      </div>
      
      <div style="display: flex; gap: 15px; margin-bottom: 20px;">
        <button onclick="selectImageFile('${type}')" style="flex: 1; background: linear-gradient(135deg, #4caf50, #388e3c); border: none; color: white; padding: 12px; border-radius: 8px; font-weight: 600; cursor: pointer;">
          üìÅ G√∂rsel Se√ß
        </button>
        <button onclick="applyPreviewImage('${type}')" id="apply-btn" disabled style="flex: 1; background: linear-gradient(135deg, #666, #555); border: none; color: white; padding: 12px; border-radius: 8px; font-weight: 600; cursor: not-allowed;">
          ‚úÖ Uygula
        </button>
      </div>
      
      <div style="display: flex; gap: 15px;">
        <button onclick="closePhotoPreviewModal()" style="flex: 1; background: linear-gradient(135deg, #e74c3c, #c0392b); border: none; color: white; padding: 12px; border-radius: 8px; font-weight: 600; cursor: pointer;">
          ‚ùå ƒ∞ptal
        </button>
      </div>
      
      <div style="margin-top: 20px; padding: 15px; background: rgba(79,195,247,0.1); border-left: 4px solid #4fc3f7; border-radius: 8px;">
        <h4 style="color: #4fc3f7; margin: 0 0 10px 0; font-size: 14px;">üí° Bilgi:</h4>
        <ul style="color: #fff; font-size: 12px; margin: 0; padding-left: 20px;">
          <li>Profil fotoƒürafƒ±: √áember ≈üeklinde g√∂r√ºn√ºr</li>
          <li>Banner: √úst kƒ±sƒ±mda dikd√∂rtgen ≈üekilde g√∂r√ºn√ºr</li>
          <li>Panel arka plan: Sol men√º arka planƒ±nƒ± deƒüi≈ütirir</li>
          <li>Maksimum dosya boyutu: 10MB</li>
        </ul>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  mainContent.classList.add('blur');
  
  // Mevcut g√∂rseli g√∂ster
  showCurrentImage(type);
}

// Mevcut g√∂rseli g√∂ster
function showCurrentImage(type) {
  const currentPreview = document.getElementById('current-preview');
  const currentUser = localStorage.getItem('yuksek-idare-user');
  
  if (type === 'profile') {
    const savedImage = localStorage.getItem(`profile-image-${currentUser}`) || 'https://cdn.discordapp.com/embed/avatars/0.png';
    currentPreview.innerHTML = `<img src="${savedImage}" style="width: 80px; height: 80px; border-radius: 50%; object-fit: cover; border: 3px solid #667eea;">`;
  } else if (type === 'banner') {
    const savedBanner = localStorage.getItem(`cover-image-${currentUser}`) || 'https://cdn.static.pikoya.com/robloxgo/games/10087093881/thumbnail_3';
    currentPreview.innerHTML = `<img src="${savedBanner}" style="width: 300px; height: 120px; border-radius: 10px; object-fit: cover; border: 2px solid #667eea;">`;
  } else if (type === 'panel') {
    const savedPanel = localStorage.getItem('panel-background') || 'Varsayƒ±lan gradyan';
    if (savedPanel === 'Varsayƒ±lan gradyan') {
      currentPreview.innerHTML = `<div style="width: 200px; height: 100px; background: linear-gradient(180deg, rgba(26, 26, 46, 0.98), rgba(15, 52, 96, 0.98)); border-radius: 10px; border: 2px solid #667eea; display: flex; align-items: center; justify-content: center; color: white;">Varsayƒ±lan</div>`;
    } else {
      currentPreview.innerHTML = `<img src="${savedPanel}" style="width: 200px; height: 100px; border-radius: 10px; object-fit: cover; border: 2px solid #667eea;">`;
    }
  }
}

// G√∂rsel dosyasƒ± se√ß
function selectImageFile(type) {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = 'image/*,image/gif';
  input.onchange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 10 * 1024 * 1024) {
        showEmbedMessage('Dosya boyutu 10MB\'dan b√ºy√ºk olamaz!', 'error');
        return;
      }
      
      const reader = new FileReader();
      reader.onload = (e) => {
        showImagePreview(e.target.result, type);
        
        // Uygula butonunu aktif et
        const applyBtn = document.getElementById('apply-btn');
        applyBtn.disabled = false;
        applyBtn.style.background = 'linear-gradient(135deg, #4caf50, #388e3c)';
        applyBtn.style.cursor = 'pointer';
        
        // Global deƒüi≈ükende sakla
        window.previewImageData = e.target.result;
        window.previewImageFile = file;
      };
      reader.readAsDataURL(file);
    }
  };
  input.click();
}

// G√∂rsel √∂nizlemesini g√∂ster
function showImagePreview(imageSrc, type) {
  const newPreview = document.getElementById('new-preview');
  
  if (type === 'profile') {
    newPreview.innerHTML = `<img src="${imageSrc}" style="width: 80px; height: 80px; border-radius: 50%; object-fit: cover; border: 3px solid #4caf50;">`;
  } else if (type === 'banner') {
    newPreview.innerHTML = `<img src="${imageSrc}" style="width: 300px; height: 120px; border-radius: 10px; object-fit: cover; border: 2px solid #4caf50;">`;
  } else if (type === 'panel') {
    newPreview.innerHTML = `<img src="${imageSrc}" style="width: 200px; height: 100px; border-radius: 10px; object-fit: cover; border: 2px solid #4caf50;">`;
  }
}

// √ñnizleme g√∂rselini uygula
function applyPreviewImage(type) {
  if (!window.previewImageData) return;
  
  const currentUser = localStorage.getItem('yuksek-idare-user');
  
  if (type === 'profile') {
    localStorage.setItem(`profile-image-${currentUser}`, window.previewImageData);
    
    const profilePicture = document.querySelector('.profile-picture');
    if (profilePicture) {
      profilePicture.src = window.previewImageData;
    }
    
    updateUserPanel();
    showEmbedMessage('Profil fotoƒürafƒ± g√ºncellendi!', 'success');
    
  } else if (type === 'banner') {
    localStorage.setItem(`cover-image-${currentUser}`, window.previewImageData);
    
    const coverPhoto = document.querySelector('.cover-photo');
    if (coverPhoto) {
      coverPhoto.style.backgroundImage = `url('${window.previewImageData}')`;
    }
    
    showEmbedMessage('Kapak fotoƒürafƒ± g√ºncellendi!', 'success');
    
  } else if (type === 'panel') {
    localStorage.setItem('panel-background', window.previewImageData);
    
    const panel = document.getElementById('modern-panel');
    if (panel) {
      panel.style.backgroundImage = `linear-gradient(rgba(26,26,46,0.8), rgba(22,33,62,0.8), rgba(15,52,96,0.8)), url('${window.previewImageData}')`;
      panel.style.backgroundSize = 'cover';
      panel.style.backgroundPosition = 'center';
    }
    
    showEmbedMessage('Panel arka planƒ± g√ºncellendi!', 'success');
  }
  
  // Log kaydƒ±
  writeLog('G√∂rselDegisiklikler', {
    islem: `${type} g√∂rseli deƒüi≈ütirildi`,
    detay: `Dosya: ${window.previewImageFile.name} (${window.previewImageFile.size} bytes)`
  });
  
  closePhotoPreviewModal();
}

// Fotoƒüraf √∂nizleme modalƒ±nƒ± kapat
function closePhotoPreviewModal() {
  const modal = document.querySelector('.modal');
  if (modal) {
    modal.remove();
    mainContent.classList.remove('blur');
  }
  // Global deƒüi≈ükenleri temizle
  window.previewImageData = null;
  window.previewImageFile = null;
}

// Kapak fotoƒürafƒ± deƒüi≈ütir
function changeCoverPhoto() {
  openBannerSelector();
}

// Banner se√ßici a√ß
function openBannerSelector() {
  const bannerModal = document.getElementById('banner-selector-modal');
  if (bannerModal) {
    bannerModal.style.display = 'flex';
  }
}

// Banner se√ßici kapat
function closeBannerSelector() {
  const bannerModal = document.getElementById('banner-selector-modal');
  if (bannerModal) {
    bannerModal.style.display = 'none';
  }
}

// √ñzel banner y√ºkle
function uploadCustomBanner() {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = 'image/*,image/gif';
  input.onchange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const currentUser = localStorage.getItem('yuksek-idare-user');
        localStorage.setItem(`cover-image-${currentUser}`, e.target.result);

        const coverPhoto = document.querySelector('.cover-photo');
        if (coverPhoto) {
          coverPhoto.style.backgroundImage = `url('${e.target.result}')`;
        }

        // Log kaydƒ±
        writeLog('ProfilBanner', {
          islem: '√ñzel kapak fotoƒürafƒ± y√ºklendi',
          detay: `Dosya: ${file.name} (${file.size} bytes)`
        });

        showEmbedMessage('Kapak fotoƒürafƒ± g√ºncellendi!', 'success');
        closeBannerSelector();
      };
      reader.readAsDataURL(file);
    }
  };
  input.click();
}

// Hazƒ±r banner se√ß
function selectBanner(bannerUrl) {
  const currentUser = localStorage.getItem('yuksek-idare-user');
  localStorage.setItem(`cover-image-${currentUser}`, bannerUrl);

  const coverPhoto = document.querySelector('.cover-photo');
  if (coverPhoto) {
    coverPhoto.style.backgroundImage = `url('${bannerUrl}')`;
  }

  // Log kaydƒ±
  writeLog('ProfilBanner', {
    islem: 'Hazƒ±r kapak fotoƒürafƒ± se√ßildi',
    detay: `Banner URL: ${bannerUrl}`
  });

  showEmbedMessage('Kapak fotoƒürafƒ± g√ºncellendi!', 'success');
  closeBannerSelector();
}

// Geli≈ümi≈ü kullanƒ±cƒ± adƒ± deƒüi≈ütirme sistemi
function changeUsername() {
  openAdvancedUsernameModal();
}

// Geli≈ümi≈ü ≈üifre deƒüi≈ütirme sistemi
function changePassword() {
  openAdvancedPasswordModal();
}

// Geli≈ümi≈ü kullanƒ±cƒ± adƒ± deƒüi≈ütirme modalƒ±
function openAdvancedUsernameModal() {
  const currentUser = localStorage.getItem('yuksek-idare-user');
  const modal = document.createElement('div');
  modal.className = 'modal';
  modal.style.display = 'flex';
  modal.style.zIndex = '9999';
  
  modal.innerHTML = `
    <div class="modal-content" style="max-width: 500px; background: linear-gradient(135deg, #1f1f1f, #2a2a2a);">
      <h3 style="color: #fff; text-align: center; margin-bottom: 25px;">üë§ Kullanƒ±cƒ± Adƒ± Deƒüi≈ütir</h3>
      
      <div style="margin-bottom: 20px;">
        <label style="color: #fff; font-weight: 600; display: block; margin-bottom: 8px;">Mevcut Kullanƒ±cƒ± Adƒ±:</label>
        <input type="text" value="${currentUser}" disabled style="background: #333; color: #aaa; cursor: not-allowed;">
      </div>
      
      <div style="margin-bottom: 20px;">
        <label style="color: #fff; font-weight: 600; display: block; margin-bottom: 8px;">Yeni Kullanƒ±cƒ± Adƒ±:</label>
        <input type="text" id="new-username-input" placeholder="Yeni kullanƒ±cƒ± adƒ±nƒ±zƒ± girin..." style="background: #2a2a2a; color: #fff; border: 2px solid #667eea;">
        <div id="username-error" style="color: #ff5252; font-size: 0.8rem; margin-top: 5px; display: none;"></div>
      </div>
      
      <div style="margin-bottom: 20px;">
        <label style="color: #fff; font-weight: 600; display: block; margin-bottom: 8px;">G√ºvenlik Doƒürulamasƒ± - Mevcut ≈ûifrenizi Girin:</label>
        <input type="password" id="confirm-password-username" placeholder="Mevcut ≈üifrenizi girin..." style="background: #2a2a2a; color: #fff; border: 2px solid #667eea;">
      </div>
      
      <div style="display: flex; gap: 15px; margin-top: 30px;">
        <button onclick="processUsernameChange()" style="flex: 1; background: linear-gradient(135deg, #4caf50, #388e3c); border: none; color: white; padding: 12px; border-radius: 8px; font-weight: 600; cursor: pointer;">
          ‚úÖ Kullanƒ±cƒ± Adƒ±nƒ± Deƒüi≈ütir
        </button>
        <button onclick="closeAdvancedUsernameModal()" style="flex: 1; background: linear-gradient(135deg, #e74c3c, #c0392b); border: none; color: white; padding: 12px; border-radius: 8px; font-weight: 600; cursor: pointer;">
          ‚ùå ƒ∞ptal
        </button>
      </div>
      
      <div style="margin-top: 20px; padding: 15px; background: rgba(255,215,0,0.1); border-left: 4px solid #ffd700; border-radius: 8px;">
        <h4 style="color: #ffd700; margin: 0 0 10px 0; font-size: 14px;">‚ö†Ô∏è √ñnemli Bilgilendirme:</h4>
        <ul style="color: #fff; font-size: 12px; margin: 0; padding-left: 20px;">
          <li>Kullanƒ±cƒ± adƒ± deƒüi≈üikliƒüi anƒ±nda ger√ßekle≈üir</li>
          <li>Eski kullanƒ±cƒ± adƒ±nƒ±z ba≈üka kullanƒ±cƒ±lar tarafƒ±ndan kullanƒ±labilir</li>
          <li>T√ºm ge√ßmi≈ü verileriniz yeni adƒ±nƒ±zla baƒülantƒ±lƒ± olacak</li>
          <li>Bu i≈ülem geri alƒ±namaz</li>
        </ul>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  mainContent.classList.add('blur');
  
  // Input focus
  setTimeout(() => {
    document.getElementById('new-username-input').focus();
  }, 100);
}

// Kullanƒ±cƒ± adƒ± deƒüi≈üikliƒüini i≈üle
function processUsernameChange() {
  const currentUser = localStorage.getItem('yuksek-idare-user');
  const newUsername = document.getElementById('new-username-input').value.trim();
  const confirmPassword = document.getElementById('confirm-password-username').value;
  const errorDiv = document.getElementById('username-error');
  
  // Temizle
  errorDiv.style.display = 'none';
  
  // Validasyonlar
  if (!newUsername) {
    errorDiv.textContent = 'Yeni kullanƒ±cƒ± adƒ± bo≈ü olamaz!';
    errorDiv.style.display = 'block';
    return;
  }
  
  if (newUsername.length < 3) {
    errorDiv.textContent = 'Kullanƒ±cƒ± adƒ± en az 3 karakter olmalƒ±dƒ±r!';
    errorDiv.style.display = 'block';
    return;
  }
  
  if (newUsername === currentUser) {
    errorDiv.textContent = 'Yeni kullanƒ±cƒ± adƒ± mevcut adƒ±nƒ±zla aynƒ± olamaz!';
    errorDiv.style.display = 'block';
    return;
  }
  
  // ≈ûifre kontrol√º
  const userData = registeredUsers.find(user => user.discordName === currentUser);
  if (!userData || userData.password !== confirmPassword) {
    errorDiv.textContent = 'Mevcut ≈üifre yanlƒ±≈ü!';
    errorDiv.style.display = 'block';
    return;
  }
  
  // Kullanƒ±cƒ± adƒ± kullanƒ±mda mƒ±?
  const existingUser = registeredUsers.find(user => user.discordName === newUsername);
  if (existingUser) {
    errorDiv.textContent = 'Bu kullanƒ±cƒ± adƒ± zaten kullanƒ±mda!';
    errorDiv.style.display = 'block';
    return;
  }
  
  // ƒ∞≈ülemi ger√ßekle≈ütir
  const userIndex = registeredUsers.findIndex(user => user.discordName === currentUser);
  if (userIndex !== -1) {
    const oldUsername = registeredUsers[userIndex].discordName;
    registeredUsers[userIndex].discordName = newUsername;
    localStorage.setItem('registeredUsers', JSON.stringify(registeredUsers));
    localStorage.setItem('yuksek-idare-user', newUsername);
    
    // Log kaydƒ±
    writeLog('KullaniciDegisiklikleri', {
      islem: 'Kullanƒ±cƒ± adƒ± deƒüi≈ütirildi',
      detay: `Eski: ${oldUsername} ‚Üí Yeni: ${newUsername}`,
      eskiAd: oldUsername,
      yeniAd: newUsername,
      degisimTarihi: new Date().toISOString()
    });
    
    // Profil modalƒ±nƒ± g√ºncelle
    const profileName = document.querySelector('.profile-name');
    if (profileName) {
      profileName.textContent = newUsername;
    }
    
    // Panel kullanƒ±cƒ± bilgilerini g√ºncelle
    updateUserPanel();
    updateModernUserPanel();
    
    closeAdvancedUsernameModal();
    showEmbedMessage(`Kullanƒ±cƒ± adƒ±nƒ±z "${newUsername}" olarak deƒüi≈ütirildi!`, 'success');
  }
}

// Kullanƒ±cƒ± adƒ± modalƒ±nƒ± kapat
function closeAdvancedUsernameModal() {
  const modal = document.querySelector('.modal');
  if (modal) {
    modal.remove();
    mainContent.classList.remove('blur');
  }
}

// Geli≈ümi≈ü ≈üifre deƒüi≈ütirme modalƒ±
function openAdvancedPasswordModal() {
  const currentUser = localStorage.getItem('yuksek-idare-user');
  const modal = document.createElement('div');
  modal.className = 'modal';
  modal.style.display = 'flex';
  modal.style.zIndex = '9999';
  
  modal.innerHTML = `
    <div class="modal-content" style="max-width: 500px; background: linear-gradient(135deg, #1f1f1f, #2a2a2a);">
      <h3 style="color: #fff; text-align: center; margin-bottom: 25px;">üîê ≈ûifre Deƒüi≈ütir</h3>
      
      <div style="margin-bottom: 20px;">
        <label style="color: #fff; font-weight: 600; display: block; margin-bottom: 8px;">Kullanƒ±cƒ± Adƒ±:</label>
        <input type="text" value="${currentUser}" disabled style="background: #333; color: #aaa; cursor: not-allowed;">
      </div>
      
      <div style="margin-bottom: 20px;">
        <label style="color: #fff; font-weight: 600; display: block; margin-bottom: 8px;">Mevcut ≈ûifre:</label>
        <input type="password" id="current-password-input" placeholder="Mevcut ≈üifrenizi girin..." style="background: #2a2a2a; color: #fff; border: 2px solid #667eea;">
      </div>
      
      <div style="margin-bottom: 20px;">
        <label style="color: #fff; font-weight: 600; display: block; margin-bottom: 8px;">Yeni ≈ûifre:</label>
        <input type="password" id="new-password-input" placeholder="Yeni ≈üifrenizi girin..." style="background: #2a2a2a; color: #fff; border: 2px solid #667eea;">
        <div style="font-size: 11px; color: #aaa; margin-top: 3px;">En az 6 karakter uzunluƒüunda olmalƒ±dƒ±r</div>
      </div>
      
      <div style="margin-bottom: 20px;">
        <label style="color: #fff; font-weight: 600; display: block; margin-bottom: 8px;">Yeni ≈ûifre (Tekrar):</label>
        <input type="password" id="confirm-new-password-input" placeholder="Yeni ≈üifrenizi tekrar girin..." style="background: #2a2a2a; color: #fff; border: 2px solid #667eea;">
        <div id="password-error" style="color: #ff5252; font-size: 0.8rem; margin-top: 5px; display: none;"></div>
      </div>
      
      <div style="display: flex; gap: 15px; margin-top: 30px;">
        <button onclick="processPasswordChange()" style="flex: 1; background: linear-gradient(135deg, #4caf50, #388e3c); border: none; color: white; padding: 12px; border-radius: 8px; font-weight: 600; cursor: pointer;">
          üîê ≈ûifreyi Deƒüi≈ütir
        </button>
        <button onclick="closeAdvancedPasswordModal()" style="flex: 1; background: linear-gradient(135deg, #e74c3c, #c0392b); border: none; color: white; padding: 12px; border-radius: 8px; font-weight: 600; cursor: pointer;">
          ‚ùå ƒ∞ptal
        </button>
      </div>
      
      <div style="margin-top: 20px; padding: 15px; background: rgba(231,76,60,0.1); border-left: 4px solid #e74c3c; border-radius: 8px;">
        <h4 style="color: #e74c3c; margin: 0 0 10px 0; font-size: 14px;">üîí G√ºvenlik Uyarƒ±sƒ±:</h4>
        <ul style="color: #fff; font-size: 12px; margin: 0; padding-left: 20px;">
          <li>G√º√ßl√º bir ≈üifre se√ßin (b√ºy√ºk-k√º√ß√ºk harf, rakam)</li>
          <li>≈ûifrenizi kimseyle payla≈ümayƒ±n</li>
          <li>D√ºzenli olarak ≈üifrenizi deƒüi≈ütirin</li>
          <li>Bu deƒüi≈üiklik anƒ±nda etkili olacaktƒ±r</li>
        </ul>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  mainContent.classList.add('blur');
  
  // Input focus
  setTimeout(() => {
    document.getElementById('current-password-input').focus();
  }, 100);
}

// ≈ûifre deƒüi≈üikliƒüini i≈üle
function processPasswordChange() {
  const currentUser = localStorage.getItem('yuksek-idare-user');
  const currentPassword = document.getElementById('current-password-input').value;
  const newPassword = document.getElementById('new-password-input').value;
  const confirmNewPassword = document.getElementById('confirm-new-password-input').value;
  const errorDiv = document.getElementById('password-error');
  
  // Temizle
  errorDiv.style.display = 'none';
  
  // Validasyonlar
  if (!currentPassword) {
    errorDiv.textContent = 'Mevcut ≈üifre bo≈ü olamaz!';
    errorDiv.style.display = 'block';
    return;
  }
  
  if (!newPassword) {
    errorDiv.textContent = 'Yeni ≈üifre bo≈ü olamaz!';
    errorDiv.style.display = 'block';
    return;
  }
  
  if (newPassword.length < 6) {
    errorDiv.textContent = 'Yeni ≈üifre en az 6 karakter olmalƒ±dƒ±r!';
    errorDiv.style.display = 'block';
    return;
  }
  
  if (newPassword !== confirmNewPassword) {
    errorDiv.textContent = 'Yeni ≈üifreler e≈üle≈ümiyor!';
    errorDiv.style.display = 'block';
    return;
  }
  
  if (currentPassword === newPassword) {
    errorDiv.textContent = 'Yeni ≈üifre mevcut ≈üifreyle aynƒ± olamaz!';
    errorDiv.style.display = 'block';
    return;
  }
  
  // Mevcut ≈üifre kontrol√º
  const userData = registeredUsers.find(user => user.discordName === currentUser);
  if (!userData || userData.password !== currentPassword) {
    errorDiv.textContent = 'Mevcut ≈üifre yanlƒ±≈ü!';
    errorDiv.style.display = 'block';
    return;
  }
  
  // ƒ∞≈ülemi ger√ßekle≈ütir
  const userIndex = registeredUsers.findIndex(user => user.discordName === currentUser);
  if (userIndex !== -1) {
    registeredUsers[userIndex].password = newPassword;
    localStorage.setItem('registeredUsers', JSON.stringify(registeredUsers));
    
    // Log kaydƒ±
    writeLog('KullaniciDegisiklikleri', {
      islem: '≈ûifre deƒüi≈ütirildi',
      detay: `Kullanƒ±cƒ±: ${currentUser} ≈üifresini g√ºncelledi`,
      degisimTarihi: new Date().toISOString()
    });
    
    closeAdvancedPasswordModal();
    showEmbedMessage('≈ûifreniz ba≈üarƒ±yla deƒüi≈ütirildi!', 'success');
  }
}

// ≈ûifre modalƒ±nƒ± kapat
function closeAdvancedPasswordModal() {
  const modal = document.querySelector('.modal');
  if (modal) {
    modal.remove();
    mainContent.classList.remove('blur');
  }
}

// Kullanƒ±cƒ± istatistikleri
function viewUserStats() {
  const currentUser = localStorage.getItem('yuksek-idare-user');
  const userRecords = kayitlar.filter(record => record.discordName === currentUser);

  const loginCount = userRecords.filter(r => r.action === 'giris').length;
  const lastLogin = userRecords.filter(r => r.action === 'giris').slice(-1)[0];

  const statsMessage = `
    üìä Giri≈ü Sayƒ±sƒ±: ${loginCount}
    üìÖ Son Giri≈ü: ${lastLogin ? `${lastLogin.tarih} ${lastLogin.saat}` : 'Hi√ß'}
    üíª Cihaz: ${userRecords[0]?.markaModel || 'Bilinmiyor'}
  `;

  showEmbedMessage(statsMessage, 'info');
}

// Kullanƒ±cƒ± verilerini indir
function exportUserData() {
  const currentUser = localStorage.getItem('yuksek-idare-user');
  const userData = registeredUsers.find(user => user.discordName === currentUser);
  const userRecords = kayitlar.filter(record => record.discordName === currentUser);

  const exportData = {
    kullanici: userData,
    kayitlar: userRecords,
    istatistikler: {
      toplamGiris: userRecords.filter(r => r.action === 'giris').length,
      kayitTarihi: userData.kayitTarihi,
      sonGiris: userRecords.filter(r => r.action === 'giris').slice(-1)[0]
    }
  };

  const dataStr = JSON.stringify(exportData, null, 2);
  const blob = new Blob([dataStr], { type: 'application/json' });
  const url = URL.createObjectURL(blob);

  const a = document.createElement('a');
  a.href = url;
  a.download = `${currentUser}_verilerim.json`;
  a.click();

  URL.revokeObjectURL(url);
  showEmbedMessage('Verileriniz indirildi!', 'success');
}

// Ayarlar modalƒ±nƒ± a√ß
function openSettingsModal() {
  const settingsModal = document.createElement('div');
  settingsModal.id = 'settings-modal';
  settingsModal.className = 'modal';
  settingsModal.style.display = 'flex';

  const currentOpacity = localStorage.getItem('background-opacity') || '0.85';
  const currentFontSize = localStorage.getItem('font-size') || '16';
  const currentFont = localStorage.getItem('font-family') || 'Montserrat';

  settingsModal.innerHTML = `
    <div class="modal-content settings-modal-content">
      <h3>‚öôÔ∏è Geli≈ümi≈ü Ayarlar Paneli</h3>

      <div class="advanced-settings">
        <div class="setting-section">
          <h4>üñºÔ∏è G√∂r√ºn√ºm Ayarlarƒ±</h4>

          <div class="settings-row">
            <div>
              <div class="setting-label">Arka Plan ≈ûeffaflƒ±ƒüƒ±</div>
              <div class="setting-description">Arka planƒ±n ≈üeffaflƒ±k seviyesini ayarlayƒ±n</div>
            </div>
            <div class="opacity-control">
              <input type="range" id="bg-opacity" min="0.3" max="1" step="0.05" value="${currentOpacity}">
              <span class="opacity-value">${Math.round(currentOpacity * 100)}%</span>
            </div>
          </div>

          <div class="settings-row">
            <div>
              <div class="setting-label">Ana Sayfa Arka Planƒ± Deƒüi≈ütir</div>
              <div class="setting-description">Sayfanƒ±n arka plan g√∂rselini deƒüi≈ütirin</div>
            </div>
            <button class="settings-btn" onclick="changePageBackground()" style="background: linear-gradient(135deg, #673ab7, #512da8); color: white; width: auto; padding: 8px 12px;">üñºÔ∏è Deƒüi≈ütir</button>
          </div>

          <div class="settings-row">
            <div>
              <div class="setting-label">Ana Sayfa Banner Deƒüi≈ütir</div>
              <div class="setting-description">√úst kƒ±sƒ±mdaki banner g√∂rselini deƒüi≈ütirin</div>
            </div>
            <button class="settings-btn" onclick="changeHeaderBanner()" style="background: linear-gradient(135deg, #ff9800, #f57c00); color: white; width: auto; padding: 8px 12px;">üéØ Deƒüi≈ütir</button>
          </div>

          <div class="settings-row">
            <div>
              <div class="setting-label">Sol Panel Arka Planƒ±</div>
              <div class="setting-description">Sol men√º panelinin arka plan g√∂rselini deƒüi≈ütirin</div>
            </div>
            <button class="settings-btn" onclick="changePanelBackground()" style="background: linear-gradient(135deg, #9c27b0, #7b1fa2); color: white; width: auto; padding: 8px 12px;">üé® Deƒüi≈ütir</button>
          </div>

          <div class="settings-row">
            <div>
              <div class="setting-label">Yazƒ± Tipi</div>
              <div class="setting-description">Sayfada kullanƒ±lacak yazƒ± tipini se√ßin</div>
            </div>
            <div class="font-selector">
              <button class="font-option ${currentFont === 'Montserrat' ? 'active' : ''}" onclick="changeFontFamily('Montserrat')" style="font-family: Montserrat;">Montserrat</button>
              <button class="font-option ${currentFont === 'Arial' ? 'active' : ''}" onclick="changeFontFamily('Arial')" style="font-family: Arial;">Arial</button>
              <button class="font-option ${currentFont === 'Roboto' ? 'active' : ''}" onclick="changeFontFamily('Roboto')" style="font-family: Roboto;">Roboto</button>
              <button class="font-option ${currentFont === 'Times New Roman' ? 'active' : ''}" onclick="changeFontFamily('Times New Roman')" style="font-family: Times New Roman;">Times</button>
            </div>
          </div>

          <div class="settings-row">
            <div>
              <div class="setting-label">Yazƒ± Boyutu</div>
              <div class="setting-description">Sayfadaki yazƒ±larƒ±n boyutunu ayarlayƒ±n</div>
            </div>
            <div class="size-control">
              <input type="range" id="font-size-slider" min="12" max="20" step="1" value="${currentFontSize}">
              <span class="size-value">${currentFontSize}px</span>
            </div>
          </div>

          <div class="settings-row">
            <div>
              <div class="setting-label">Tema Modu</div>
              <div class="setting-description">Koyu/a√ßƒ±k tema se√ßimi</div>
            </div>
            <div class="theme-buttons">
              <button class="theme-btn" onclick="setTheme('dark')">üåô Koyu</button>
              <button class="theme-btn" onclick="setTheme('light')">‚òÄÔ∏è A√ßƒ±k</button>
              <button class="theme-btn" onclick="setTheme('auto')">üîÑ Otomatik</button>
            </div>
          </div>

          <div class="settings-row">
            <div>
              <div class="setting-label">Animasyonlar</div>
              <div class="setting-description">Sayfa animasyonlarƒ±nƒ± kontrol edin</div>
            </div>
            <label class="switch">
              <input type="checkbox" id="animations-enabled" checked>
              <span class="slider"></span>
            </label>
          </div>
        </div>

        <div class="setting-section">
          <h4>üîî Bildirim Ayarlarƒ±</h4>

          <div class="settings-row">
            <div>
              <div class="setting-label">Masa√ºst√º Bildirimleri</div>
              <div class="setting-description">Yeni mesajlar i√ßin bildirim g√∂ster</div>
            </div>
            <label class="switch">
              <input type="checkbox" id="notifications-enabled" checked>
              <span class="slider"></span>
            </label>
          </div>

          <div class="settings-row">
            <div>
              <div class="setting-label">Bildirim Sesleri</div>
              <div class="setting-description">Bildirimler i√ßin ses efektleri</div>
            </div>
            <label class="switch">
              <input type="checkbox" id="notification-sounds" ${localStorage.getItem('notification-sounds') !== 'false' ? 'checked' : ''}>
              <span class="slider"></span>
            </label>
          </div>

          <div class="settings-row">
            <div>
              <div class="setting-label">Telsiz Sesleri</div>
              <div class="setting-description">Telsiz mesajlarƒ± i√ßin ses efektleri</div>
            </div>
            <label class="switch">
              <input type="checkbox" id="radio-sounds" ${radioSoundsEnabled ? 'checked' : ''}>
              <span class="slider"></span>
            </label>
          </div>

          <div class="settings-row">
            <div>
              <div class="setting-label">@everyone Bildirimleri</div>
              <div class="setting-description">@everyone etiketleri i√ßin √∂zel bildirim</div>
            </div>
            <label class="switch">
              <input type="checkbox" id="everyone-notifications" checked>
              <span class="slider"></span>
            </label>
          </div>

          <div class="notification-preview">
            üí° Bildirim √∂nizlemesi: Bu ayarlar ger√ßek zamanlƒ± uygulanƒ±r
          </div>
        </div>

        <div class="setting-section">
          <h4>üîê Gizlilik ve G√ºvenlik</h4>

          <div class="settings-row">
            <div>
              <div class="setting-label">Profil G√∂r√ºn√ºrl√ºƒü√º</div>
              <div class="setting-description">Profilinizi diƒüer kullanƒ±cƒ±lara g√∂ster</div>
            </div>
            <label class="switch">
              <input type="checkbox" id="profile-visibility" checked>
              <span class="slider"></span>
            </label>
          </div>

          <div class="settings-row">
            <div>
              <div class="setting-label">Otomatik Giri≈ü</div>
              <div class="setting-description">Tarayƒ±cƒ±da oturum bilgilerini sakla</div>
            </div>
            <label class="switch">
              <input type="checkbox" id="auto-login" checked>
              <span class="slider"></span>
            </label>
          </div>

          <div class="settings-row">
            <div>
              <div class="setting-label">Veri ≈ûifreleme</div>
              <div class="setting-description">Yerel verileri ≈üifreli sakla</div>
            </div>
            <label class="switch">
              <input type="checkbox" id="data-encryption">
              <span class="slider"></span>
            </label>
          </div>
        </div>

        <div class="setting-section">
          <h4>‚ö° Performans ve Sistem</h4>

          <div class="settings-row">
            <div>
              <div class="setting-label">Y√ºksek Performans Modu</div>
              <div class="setting-description">Daha hƒ±zlƒ± y√ºkleme i√ßin optimizasyon</div>
            </div>
            <label class="switch">
              <input type="checkbox" id="high-performance">
              <span class="slider"></span>
            </label>
          </div>

          <div class="settings-row">
            <div>
              <div class="setting-label">Otomatik Kaydetme</div>
              <div class="setting-description">Verilerinizi otomatik olarak kaydet</div>
            </div>
            <label class="switch">
              <input type="checkbox" id="auto-save" checked>
              <span class="slider"></span>
            </label>
          </div>

          <div class="settings-row">
            <div>
              <div class="setting-label">Geli≈ümi≈ü √ñnbellek</div>
              <div class="setting-description">Daha hƒ±zlƒ± sayfa y√ºklemesi i√ßin</div>
            </div>
            <label class="switch">
              <input type="checkbox" id="advanced-cache">
              <span class="slider"></span>
            </label>
          </div>
        </div>
      </div>

      <div class="settings-actions">
        <button class="settings-btn reset-btn" onclick="resetSettings()">üîÑ Varsayƒ±lana D√∂n</button>
        <button class="settings-btn save-btn" onclick="saveSettings()">üíæ Ayarlarƒ± Kaydet</button>
        <button class="settings-btn" onclick="exportSettings()" style="background: linear-gradient(135deg, #9c27b0, #7b1fa2); color: white;">üì§ Dƒ±≈üa Aktar</button>
      </div>

      <button class="modal-close-btn" onclick="closeSettingsModal()">‚úï</button>
    </div>
  `;

  document.body.appendChild(settingsModal);
  mainContent.classList.add('blur');

  // Event listeners
  const opacitySlider = document.getElementById('bg-opacity');
  const opacityValue = document.querySelector('.opacity-value');

  opacitySlider.addEventListener('input', (e) => {
    const value = e.target.value;
    opacityValue.textContent = Math.round(value * 100) + '%';
    updateBackgroundOpacity(value);
  });

  const fontSizeSlider = document.getElementById('font-size-slider');
  const sizeValue = document.querySelector('.size-value');

  fontSizeSlider.addEventListener('input', (e) => {
    const value = e.target.value;
    sizeValue.textContent = value + 'px';
    changeFontSize(value);
  });
}

// Ayarlar modalƒ±nƒ± kapat
function closeSettingsModal() {
  const settingsModal = document.getElementById('settings-modal');
  if (settingsModal) {
    settingsModal.remove();
    mainContent.classList.remove('blur');
  }
}

// Arka plan ≈üeffaflƒ±ƒüƒ±nƒ± g√ºncelle
function updateBackgroundOpacity(opacity) {
  document.documentElement.style.setProperty('--bg-opacity', opacity);
  const beforeElement = document.querySelector('body::before') || document.body;
  if (document.body.classList.contains('light-mode')) {
    document.body.style.setProperty('--bg-color', `rgba(240,240,240,${opacity})`);
  } else {
    document.body.style.setProperty('--bg-color', `rgba(18,18,18,${opacity})`);
  }
}

// Tema ayarla
function setTheme(theme) {
  if (theme === 'light') {
    document.body.classList.add('light-mode');
    document.getElementById('theme-toggle').textContent = '‚òÄÔ∏è';
  } else if (theme === 'dark') {
    document.body.classList.remove('light-mode');
    document.getElementById('theme-toggle').textContent = 'üåô';
  } else if (theme === 'auto') {
    const hour = new Date().getHours();
    if (hour >= 6 && hour < 18) {
      setTheme('light');
    } else {
      setTheme('dark');
    }
  }
  localStorage.setItem('theme', theme);
}

// Ayarlarƒ± sƒ±fƒ±rla
function resetSettings() {
  localStorage.removeItem('background-opacity');
  localStorage.removeItem('theme');
  localStorage.removeItem('notifications-enabled');

  document.getElementById('bg-opacity').value = '0.85';
  document.querySelector('.opacity-value').textContent = '85%';
  updateBackgroundOpacity('0.85');

  showEmbedMessage('Ayarlar sƒ±fƒ±rlandƒ±!', 'success');
  closeSettingsModal();
}

// Ayarlarƒ± kaydet
function saveSettings() {
  const opacity = document.getElementById('bg-opacity').value;
  const notificationsEnabled = document.getElementById('notifications-enabled').checked;

  localStorage.setItem('background-opacity', opacity);
  localStorage.setItem('notifications-enabled', notificationsEnabled);

  showEmbedMessage('Ayarlar kaydedildi!', 'success');
  closeSettingsModal();
}

// Kullanƒ±cƒ± giri≈ü durumu kontrol√º
function isLoggedIn() {
  return !!localStorage.getItem('yuksek-idare-user');
}

// Kullanƒ±cƒ± bilgilerini panelde g√ºncelle
function updateUserPanel() {
  const currentUser = localStorage.getItem('yuksek-idare-user');
  const userInfoPanel = document.getElementById('user-info-panel');
  const userNameDisplay = document.getElementById('user-name-display');
  const userAvatar = document.getElementById('user-avatar');

  if (currentUser && userInfoPanel && userNameDisplay && userAvatar) {
    userInfoPanel.style.display = 'flex';
    userNameDisplay.textContent = currentUser;
    userAvatar.textContent = currentUser.charAt(0).toUpperCase();
  } else if (userInfoPanel) {
    userInfoPanel.style.display = 'none';
  }
}

// Admin kontrol√º
function isAdmin() {
  const currentUser = localStorage.getItem('yuksek-idare-user');
  const userData = registeredUsers.find(user => user.discordName === currentUser);
  return userData?.isAdmin || userData?.isCreator;
}

// Creator kontrol√º
function isCreator() {
  const currentUser = localStorage.getItem('yuksek-idare-user');
  const userData = registeredUsers.find(user => user.discordName === currentUser);
  return userData?.isCreator;
}

// Admin paneli a√ß
function openAdminPanel() {
  showEmbedMessage('üëë Admin paneline y√∂nlendiriliyorsunuz...', 'success', 3000);
  window.open('admin.html', '_blank');
}

// Admin √∂zel paneli men√ºye ekle - Creator/Admin ayrƒ±mƒ±
function updateAdminPanelAccess() {
  if (isAdmin()) {
    // Mevcut admin b√∂l√ºm√ºn√º kaldƒ±r
    const existingAdmin = document.querySelector('.panel-section .admin-item')?.closest('.panel-section');
    if (existingAdmin) {
      existingAdmin.remove();
    }
    
    // Admin b√∂l√ºm√º ekle
    const adminSection = document.createElement('div');
    adminSection.className = 'panel-section';
    
    let adminButtons = `
      <button class="panel-item admin-item" onclick="openAdminPanel(); toggleModernPanel();" style="background: rgba(255,215,0,0.1); border-color: rgba(255,215,0,0.3);">
        üìä Admin Panel
      </button>
      <button class="panel-item admin-item" onclick="viewSystemLogs(); toggleModernPanel();" style="background: rgba(255,215,0,0.1); border-color: rgba(255,215,0,0.3);">
        üìã Sistem Loglarƒ±
      </button>
      <button class="panel-item admin-item" onclick="manageUsers(); toggleModernPanel();" style="background: rgba(255,215,0,0.1); border-color: rgba(255,215,0,0.3);">
        üë• Kullanƒ±cƒ± Y√∂netimi
      </button>
    `;
    
    // Sadece Creator AI ve Telsiz g√∂rebilir
    if (isCreator()) {
      adminSection.innerHTML = `
        <div class="section-title">üëë Creator ƒ∞≈ülemleri</div>
        <div class="panel-items">
          ${adminButtons}
          <button class="panel-item admin-item" onclick="openAdvancedAI(); toggleModernPanel();" style="background: rgba(129,236,236,0.1); border-color: rgba(129,236,236,0.3);">
            ü§ñ Creator AI
          </button>
          <button class="panel-item admin-item" onclick="openRadioModal(); toggleModernPanel();" style="background: rgba(255,193,7,0.1); border-color: rgba(255,193,7,0.3);">
            üìª Creator Telsiz
          </button>
        </div>
      `;
    } else {
      adminSection.innerHTML = `
        <div class="section-title">‚ö° Admin ƒ∞≈ülemleri</div>
        <div class="panel-items">
          ${adminButtons}
        </div>
      `;
    }
    
    // √áƒ±kƒ±≈ü b√∂l√ºm√ºnden √∂nce ekle
    const logoutSection = document.getElementById('logout-section');
    if (logoutSection) {
      logoutSection.parentNode.insertBefore(adminSection, logoutSection);
    }
  }
}

// Sistem loglarƒ±nƒ± g√∂r√ºnt√ºle
function viewSystemLogs() {
  const kayitlar = JSON.parse(localStorage.getItem('kayitlar') || '[]');
  if (kayitlar.length === 0) {
    showEmbedMessage('Hen√ºz sistem logu bulunmuyor.', 'info');
    return;
  }
  
  const recentLogs = kayitlar.slice(-10).reverse();
  let logMessage = 'üìã Son 10 Sistem Logu:\n\n';
  
  recentLogs.forEach(log => {
    logMessage += `üìÖ ${log.tarih} ‚è∞ ${log.saat}\n`;
    logMessage += `üë§ ${log.discordName || 'Ziyaret√ßi'}\n`;
    logMessage += `‚ö° ${log.action.toUpperCase()}\n`;
    logMessage += `üíª ${log.markaModel}\n`;
    logMessage += '‚îÄ'.repeat(30) + '\n\n';
  });
  
  alert(logMessage);
}

// Kullanƒ±cƒ± y√∂netimi
function manageUsers() {
  const registeredUsers = JSON.parse(localStorage.getItem('registeredUsers') || '[]');
  if (registeredUsers.length === 0) {
    showEmbedMessage('Hen√ºz kayƒ±tlƒ± kullanƒ±cƒ± bulunmuyor.', 'info');
    return;
  }
  
  let userList = 'üë• Kayƒ±tlƒ± Kullanƒ±cƒ±lar:\n\n';
  registeredUsers.forEach((user, index) => {
    const isAdminUser = user.discordName === '0vexa.' || user.discordName === '0vexa.efe_090102';
    userList += `${index + 1}. ${isAdminUser ? 'üëë' : 'üë§'} ${user.discordName}\n`;
    userList += `   üìÖ Kayƒ±t: ${new Date(user.kayitTarihi).toLocaleDateString('tr-TR')}\n`;
    userList += `   üíª Cihaz: ${user.markaModel}\n\n`;
  });
  
  alert(userList);
}

// Kayƒ±tlar butonunu g√∂ster/gizle (eski uyumluluk i√ßin)
function toggleKayitlarButton() {
  updateAdminPanelAccess();
}

function openLoginModal() {
  loginModal.style.display = 'flex';
  mainContent.classList.add('blur');
  if (logoutBtn) logoutBtn.style.display = 'none';
  clearLoginErrors();
  if (loginForm) loginForm.style.display = 'block';
  if (forgotPasswordMessage) forgotPasswordMessage.style.display = 'none';
}

function openRegisterModal() {
  registerModal.style.display = 'flex';
  mainContent.classList.add('blur');
  clearRegisterErrors();
}

function closeModals() {
  if (loginModal) loginModal.style.display = 'none';
  if (registerModal) registerModal.style.display = 'none';
  if (mainContent) mainContent.classList.remove('blur');
}

function logout() {
  const currentUser = localStorage.getItem('yuksek-idare-user');
  const currentUserData = registeredUsers.find(user => user.discordName === currentUser);

  if (currentUser && currentUserData) {
    saveKayit(currentUser, currentUserData.password, 'cikis');
  }

  localStorage.removeItem('yuksek-idare-user');
  closeModals();
  openLoginModal();
}

// Hata mesajƒ±nƒ± g√∂ster ve 6 saniye sonra gizle
function showErrorTimed(id, message) {
  const el = document.getElementById(id);
  if (!el) return;
  el.textContent = message;
  el.classList.remove('hide');

  if (errorTimeouts[id]) clearTimeout(errorTimeouts[id]);

  errorTimeouts[id] = setTimeout(() => {
    el.classList.add('hide');
  }, 6000);
}

function clearLoginErrors() {
  ['error-login-username', 'error-login-password'].forEach(id => {
    const el = document.getElementById(id);
    if (el) {
      el.textContent = '';
      el.classList.add('hide');
    }
  });
}

function clearRegisterErrors() {
  ['error-discord-name', 'error-password', 'error-password2'].forEach(id => {
    const el = document.getElementById(id);
    if (el) {
      el.textContent = '';
      el.classList.add('hide');
    }
  });
}

function clearLoginInputs() {
  if (loginUsernameInput) loginUsernameInput.value = '';
  if (loginPasswordInput) loginPasswordInput.value = '';
  clearLoginErrors();
}

function clearRegisterInputs() {
  if (registerForm) registerForm.reset();
  clearRegisterErrors();
}

// Kullanƒ±cƒ± kaydetme
function saveUser(userData) {
  registeredUsers.push(userData);
  localStorage.setItem('registeredUsers', JSON.stringify(registeredUsers));
}

// Kullanƒ±cƒ± doƒürulama
function validateUser(username, password) {
  return registeredUsers.find(user => 
    user.discordName === username && user.password === password
  );
}

// B√∂l√ºme kaydƒ±rma ve vurgulama
function scrollToSection(sectionId) {
  const section = document.getElementById(sectionId);
  if (section) {
    section.scrollIntoView({ behavior: 'smooth', block: 'center' });

    // √ñnceki vurgularƒ± temizle
    document.querySelectorAll('.highlight-section').forEach(el => {
      el.classList.remove('highlight-section');
    });

    // 2 saniye vurgulamak i√ßin
    setTimeout(() => {
      section.classList.add('highlight-section');
      setTimeout(() => {
        section.classList.remove('highlight-section');
      }, 2000);
    }, 500);

    // B√∂l√ºm adƒ±na g√∂re √∂zel bildirimler
    const sectionNames = {
      'alt-yonetim-kadro': 'Kadro B√∂l√ºm√ºne ge√ßildi',
      'rutbe-islemleri': 'R√ºtbe ƒ∞≈ülemleri\'ne ge√ßildi', 
      'kurallar-hakkinda': 'Kurallar B√∂l√ºm√º\'ne ge√ßildi',
      'etkinlik-kurallari': 'Etkinlik Kurallarƒ±\'na ge√ßildi',
      'yuksek-idare-bildirgesi': 'Bildirgesi\'ne ge√ßildi',
      'hakkimizda': 'Hakkƒ±mƒ±zda B√∂l√ºm√º\'ne ge√ßildi'
    };
    
    const sectionName = sectionNames[sectionId] || 'B√∂l√ºme y√∂nlendirildiniz!';
    showEmbedMessage(sectionName, 'navigation', 3000);
  }
}

// Dosya indirme fonksiyonu
function downloadKayitlarTxt(icerik) {
  try {
    const blob = new Blob([icerik], { type: 'text/plain;charset=utf-8' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'kayitlar.txt';
    a.style.display = 'none';
    document.body.appendChild(a);
    // Otomatik indirme (kullanƒ±cƒ± onayƒ± gerekebilir)
    // a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  } catch (error) {
    console.log('Dosya indirme hatasƒ±:', error);
  }
}

// Telsiz Sistemi Fonksiyonlarƒ±
function openRadioModal() {
  const radioModal = document.createElement('div');
  radioModal.id = 'radio-modal';
  radioModal.className = 'modal';
  radioModal.style.display = 'flex';

  radioModal.innerHTML = document.getElementById('radio-modal').innerHTML;
  document.body.appendChild(radioModal);
  mainContent.classList.add('blur');

  updateOnlineUsers();
  loadRadioMessages();

  // Enter tu≈üu ile mesaj g√∂nderme
  const messageInput = document.getElementById('radio-message-input');
  messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      sendRadioMessage();
    }
  });
}

function closeRadioModal() {
  const radioModal = document.getElementById('radio-modal');
  if (radioModal) {
    radioModal.style.display = 'none';
    mainContent.classList.remove('blur');
  }
}

function updateOnlineUsers() {
  const currentUser = localStorage.getItem('yuksek-idare-user');
  if (!currentUser) return;

  // Kullanƒ±cƒ±yƒ± online listeye ekle
  if (!onlineUsers.includes(currentUser)) {
    onlineUsers.push(currentUser);
    localStorage.setItem('onlineUsers', JSON.stringify(onlineUsers));
  }

  const usersList = document.getElementById('online-users-list');
  const onlineCount = document.getElementById('online-count');

  if (usersList && onlineCount) {
    onlineCount.textContent = onlineUsers.length;
    usersList.innerHTML = '';

    onlineUsers.forEach(username => {
      const userBadge = document.createElement('div');
      userBadge.className = 'user-badge';
      if (username === '0vexa.') {
        userBadge.classList.add('admin');
      }
      userBadge.innerHTML = `${username === '0vexa.' ? 'üëë' : 'üë§'} ${username}`;
      usersList.appendChild(userBadge);
    });
  }
}

function sendRadioMessage() {
  const messageInput = document.getElementById('radio-message-input');
  const currentUser = localStorage.getItem('yuksek-idare-user');

  if (!messageInput || !currentUser) return;

  const messageText = messageInput.value.trim();
  if (!messageText) return;

  const message = {
    id: Date.now() + Math.random(),
    user: currentUser,
    content: messageText,
    timestamp: new Date(),
    isAdmin: currentUser === '0vexa.',
    hasEveryoneMention: messageText.includes('@everyone'),
    type: 'text'
  };

  radioMessages.push(message);
  localStorage.setItem('radioMessages', JSON.stringify(radioMessages));

  // Log kaydƒ±
  writeLog('Telsiz', {
    islem: 'Mesaj g√∂nderildi',
    detay: `Mesaj: "${messageText.substring(0, 50)}${messageText.length > 50 ? '...' : ''}"`
  });

  displayRadioMessage(message);
  messageInput.value = '';

  // @everyone bildirim kontrol√º
  if (message.hasEveryoneMention) {
    showEmbedMessage(`${currentUser} herkesi etiketledi!`, 'warning');
    if (radioSoundsEnabled) {
      playNotificationSound('everyone');
    }
  } else if (radioSoundsEnabled) {
    playNotificationSound('message');
  }

  showEmbedMessage('Telsiz mesajƒ± g√∂nderildi!', 'success');
}

// Emoji picker a√ß/kapat
function openEmojiPicker() {
  const emojiPicker = document.getElementById('emoji-picker');
  if (emojiPicker) {
    emojiPicker.style.display = emojiPicker.style.display === 'none' ? 'block' : 'none';
  }
}

// Emoji ekle
function addEmoji(emoji) {
  const messageInput = document.getElementById('radio-message-input');
  if (messageInput) {
    messageInput.value += emoji;
    messageInput.focus();
  }
  // Emoji picker'ƒ± gizle
  const emojiPicker = document.getElementById('emoji-picker');
  if (emojiPicker) {
    emojiPicker.style.display = 'none';
  }
}

// Telsiz fotoƒüraf y√ºkleme
function uploadRadioImage() {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = 'image/*';
  input.onchange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) { // 5MB limit
        showEmbedMessage('Dosya boyutu 5MB\'dan b√ºy√ºk olamaz!', 'error');
        return;
      }

      const reader = new FileReader();
      reader.onload = (e) => {
        const currentUser = localStorage.getItem('yuksek-idare-user');

        const message = {
          id: Date.now() + Math.random(),
          user: currentUser,
          content: e.target.result,
          timestamp: new Date(),
          isAdmin: currentUser === '0vexa.',
          hasEveryoneMention: false,
          type: 'image',
          fileName: file.name
        };

        radioMessages.push(message);
        localStorage.setItem('radioMessages', JSON.stringify(radioMessages));

        // Log kaydƒ±
        writeLog('Telsiz', {
          islem: 'Fotoƒüraf payla≈üƒ±ldƒ±',
          detay: `Dosya: ${file.name} (${file.size} bytes)`
        });

        displayRadioMessage(message);

        if (radioSoundsEnabled) {
          playNotificationSound('image');
        }

        showEmbedMessage('Fotoƒüraf ba≈üarƒ±yla payla≈üƒ±ldƒ±!', 'success');
      };
      reader.readAsDataURL(file);
    }
  };
  input.click();
}

function displayRadioMessage(message) {
  const messagesContainer = document.getElementById('radio-messages');
  if (!messagesContainer) return;

  const messageElement = document.createElement('div');
  messageElement.className = 'radio-message';
  if (message.hasEveryoneMention) {
    messageElement.classList.add('everyone-mention');
  }

  let contentHtml = '';
  if (message.type === 'image') {
    contentHtml = `
      <div class="message-image">
        <img src="${message.content}" alt="Payla≈üƒ±lan G√∂rsel" style="max-width: 300px; max-height: 200px; border-radius: 8px; cursor: pointer;" onclick="openImageModal('${message.content}')">
        <div class="image-info">üì∑ ${message.fileName || 'G√∂rsel'}</div>
      </div>
    `;
  } else {
    const formattedContent = message.content.replace(/@everyone/g, '<span class="everyone-highlight">@everyone</span>');
    contentHtml = `<div class="message-content">${formattedContent}</div>`;
  }

  messageElement.innerHTML = `
    <div class="message-header">
      <span class="message-user ${message.isAdmin ? 'admin' : ''}">${message.isAdmin ? 'üëë' : 'üë§'} ${message.user}</span>
      <span class="message-time">${new Date(message.timestamp).toLocaleTimeString('tr-TR')}</span>
    </div>
    ${contentHtml}
  `;

  messagesContainer.appendChild(messageElement);
  messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// G√∂rsel modal a√ßma
function openImageModal(imageSrc) {
  const modal = document.createElement('div');
  modal.className = 'modal';
  modal.style.display = 'flex';
  modal.innerHTML = `
    <div class="modal-content" style="max-width: 90vw; max-height: 90vh; padding: 0; background: transparent;">
      <img src="${imageSrc}" style="max-width: 100%; max-height: 100%; object-fit: contain; border-radius: 8px;">
      <button class="modal-close-btn" onclick="this.parentElement.parentElement.remove(); mainContent.classList.remove('blur')" style="position: absolute; top: 10px; right: 10px;">‚úï</button>
    </div>
  `;

  document.body.appendChild(modal);
  mainContent.classList.add('blur');
}

function loadRadioMessages() {
  const messagesContainer = document.getElementById('radio-messages');
  if (!messagesContainer) return;

  // Ho≈ügeldin mesajƒ±nƒ± temizle
  messagesContainer.innerHTML = '';

  if (radioMessages.length === 0) {
    messagesContainer.innerHTML = '<div class="welcome-message">üìª Telsiz sistemine ho≈ügeldiniz! Mesajlarƒ±nƒ±z t√ºm aktif kullanƒ±cƒ±lara ula≈üacak.</div>';
  } else {
    radioMessages.forEach(message => displayRadioMessage(message));
  }
}

function clearRadioChat() {
  if (confirm('T√ºm telsiz mesajlarƒ±nƒ± silmek istediƒüinizden emin misiniz?')) {
    radioMessages = [];
    localStorage.removeItem('radioMessages');
    loadRadioMessages();
    showEmbedMessage('Telsiz ge√ßmi≈üi temizlendi!', 'success');
  }
}

function toggleRadioSounds() {
  radioSoundsEnabled = !radioSoundsEnabled;
  localStorage.setItem('radioSounds', radioSoundsEnabled);
  showEmbedMessage(`Telsiz sesleri ${radioSoundsEnabled ? 'a√ßƒ±ldƒ±' : 'kapatƒ±ldƒ±'}!`, 'info');
}

function exportRadioChat() {
  const exportData = {
    messages: radioMessages,
    exportDate: new Date().toISOString(),
    userCount: onlineUsers.length
  };

  const dataStr = JSON.stringify(exportData, null, 2);
  const blob = new Blob([dataStr], { type: 'application/json' });
  const url = URL.createObjectURL(blob);

  const a = document.createElement('a');
  a.href = url;
  a.download = 'telsiz_gecmisi.json';
  a.click();

  URL.revokeObjectURL(url);
  showEmbedMessage('Telsiz ge√ßmi≈üi indirildi!', 'success');
}

function playNotificationSound(type) {
  // Basit ses efekti simulasyonu
  if (type === 'everyone') {
    console.log('üîä @everyone bildirim sesi √ßalƒ±yor...');
  } else {
    console.log('üîä Mesaj bildirim sesi √ßalƒ±yor...');
  }
}

// Uygulamalar Sistemi
function openAppsModal() {
  const appsModal = document.getElementById('apps-modal');
  if (appsModal) {
    appsModal.style.display = 'flex';
    mainContent.classList.add('blur');
  }
}

function closeAppsModal() {
  const appsModal = document.getElementById('apps-modal');
  if (appsModal) {
    appsModal.style.display = 'none';
    mainContent.classList.remove('blur');
  }
}

function openFileManager() {
  showEmbedMessage('üìÅ Dosya Y√∂neticisi a√ßƒ±lƒ±yor...', 'info');
  // Basit dosya listesi
  const files = ['kayitlar.txt', 'ayarlar.json', 'profil_resimleri/', 'telsiz_gecmisi.json'];
  const fileList = files.map(f => `üìÑ ${f}`).join('\n');
  alert(`Dosyalar:\n\n${fileList}`);
}

function openClipSharer() {
  closeAppsModal();
  const clipModal = document.getElementById('clip-modal');
  if (clipModal) {
    clipModal.style.display = 'flex';
    loadSharedClips();
  }
}

function closeClipModal() {
  const clipModal = document.getElementById('clip-modal');
  if (clipModal) {
    clipModal.style.display = 'none';
    mainContent.classList.remove('blur');
  }
}

function shareClip() {
  const clipText = document.getElementById('clip-text');
  const currentUser = localStorage.getItem('yuksek-idare-user');

  if (!clipText || !currentUser) return;

  const text = clipText.value.trim();
  if (!text) {
    showEmbedMessage('Payla≈üƒ±lacak metin bo≈ü olamaz!', 'error');
    return;
  }

  const clip = {
    id: Date.now(),
    user: currentUser,
    content: text,
    timestamp: new Date().toISOString()
  };

  sharedClips.push(clip);
  localStorage.setItem('sharedClips', JSON.stringify(sharedClips));

  clipText.value = '';
  loadSharedClips();
  showEmbedMessage('Klip ba≈üarƒ±yla payla≈üƒ±ldƒ±!', 'success');
}

function clearClip() {
  const clipText = document.getElementById('clip-text');
  if (clipText) {
    clipText.value = '';
  }
}

function loadSharedClips() {
  const clipsList = document.getElementById('clips-list');
  if (!clipsList) return;

  if (sharedClips.length === 0) {
    clipsList.innerHTML = '<div style="text-align: center; color: #aaa; padding: 20px;">Hen√ºz payla≈üƒ±lan klip yok</div>';
    return;
  }

  clipsList.innerHTML = '';
  sharedClips.slice(-10).reverse().forEach(clip => {
    const clipElement = document.createElement('div');
    clipElement.className = 'clip-item';
    clipElement.innerHTML = `
      <div class="clip-header">
        <span>${clip.user}</span>
        <span>${new Date(clip.timestamp).toLocaleString('tr-TR')}</span>
      </div>
      <div class="clip-content">${clip.content}</div>
    `;
    clipsList.appendChild(clipElement);
  });
}

function openVoiceRecorder() {
  showEmbedMessage('üé§ Ses kaydƒ± √∂zelliƒüi geli≈ütiriliyor...', 'info');
}

function openSurveyCreator() {
  showEmbedMessage('üìä Anket olu≈üturucu geli≈ütiriliyor...', 'info');
}

function openCalculator() {
  const result = prompt('Hesaplamak istediƒüiniz i≈ülemi girin (√∂rn: 2+2):');
  if (result) {
    try {
      const calculation = eval(result);
      showEmbedMessage(`Sonu√ß: ${result} = ${calculation}`, 'success');
    } catch (e) {
      showEmbedMessage('Ge√ßersiz i≈ülem!', 'error');
    }
  }
}

function openNotepad() {
  const note = prompt('Notunuzu yazƒ±n:');
  if (note) {
    const savedNotes = JSON.parse(localStorage.getItem('userNotes') || '[]');
    savedNotes.push({
      id: Date.now(),
      content: note,
      timestamp: new Date().toISOString()
    });
    localStorage.setItem('userNotes', JSON.stringify(savedNotes));
    showEmbedMessage('Not kaydedildi!', 'success');
  }
}

// Hesap silme fonksiyonu
function deleteAccount() {
  const currentUser = localStorage.getItem('yuksek-idare-user');
  if (!currentUser) return;

  const confirmation = prompt(`Hesabƒ±nƒ±zƒ± silmek i√ßin "${currentUser}" yazƒ±n:`);
  if (confirmation === currentUser) {
    const finalConfirm = confirm('Bu i≈ülem geri alƒ±namaz! Hesabƒ±nƒ±zƒ± kalƒ±cƒ± olarak silmek istediƒüinizden emin misiniz?');
    if (finalConfirm) {
      // Kullanƒ±cƒ±yƒ± listeden √ßƒ±kar
      registeredUsers = registeredUsers.filter(user => user.discordName !== currentUser);
      localStorage.setItem('registeredUsers', JSON.stringify(registeredUsers));

      // Kullanƒ±cƒ± verilerini temizle
      localStorage.removeItem('yuksek-idare-user');
      localStorage.removeItem(`profile-image-${currentUser}`);
      localStorage.removeItem(`cover-image-${currentUser}`);

      showEmbedMessage('Hesabƒ±nƒ±z ba≈üarƒ±yla silindi.', 'success');
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    }
  } else {
    showEmbedMessage('Hesap adƒ± e≈üle≈ümiyor!', 'error');
  }
}

// Sayfa arka planƒ±nƒ± deƒüi≈ütir - Modal sistemi
function changePageBackground() {
  showEmbedMessage('Arka Plan Deƒüi≈ütirme sayfasƒ±na ge√ßildi', 'navigation', 2500);
  openPageBackgroundModal();
}

function openPageBackgroundModal() {
  // Ayarlar modalƒ±nƒ± kapat
  closeSettingsModal();
  
  const modal = document.createElement('div');
  modal.className = 'modal';
  modal.style.display = 'flex';
  modal.style.zIndex = '10000';
  
  modal.innerHTML = `
    <div class="modal-content" style="max-width: 700px; width: 95%; background: linear-gradient(135deg, #1f1f1f, #2a2a2a);">
      <h3 style="color: #fff; text-align: center; margin-bottom: 25px;">üñºÔ∏è Sayfa Arka Planƒ± Deƒüi≈ütir</h3>
      
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px;">
        <div style="background: rgba(255,255,255,0.05); padding: 20px; border-radius: 12px; text-align: center;">
          <h4 style="color: #4caf50; margin-bottom: 15px;">üìÅ Kendi G√∂rselinizi Y√ºkleyin</h4>
          <button onclick="uploadCustomPageBackground()" style="background: linear-gradient(135deg, #4caf50, #388e3c); border: none; color: white; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-weight: 600; width: 100%;">
            üì∑ Cihazdan G√∂rsel Se√ß
          </button>
        </div>
        
        <div style="background: rgba(255,255,255,0.05); padding: 20px; border-radius: 12px; text-align: center;">
          <h4 style="color: #ff9800; margin-bottom: 15px;">üåà Hazƒ±r Gradyanlar</h4>
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
            <button onclick="setGradientBackground('linear-gradient(135deg, #667eea, #764ba2)')" style="background: linear-gradient(135deg, #667eea, #764ba2); border: none; color: white; padding: 8px; border-radius: 6px; cursor: pointer; font-size: 12px;">Mavi</button>
            <button onclick="setGradientBackground('linear-gradient(135deg, #ff6b6b, #ee5a52)')" style="background: linear-gradient(135deg, #ff6b6b, #ee5a52); border: none; color: white; padding: 8px; border-radius: 6px; cursor: pointer; font-size: 12px;">Kƒ±rmƒ±zƒ±</button>
            <button onclick="setGradientBackground('linear-gradient(135deg, #4caf50, #388e3c)')" style="background: linear-gradient(135deg, #4caf50, #388e3c); border: none; color: white; padding: 8px; border-radius: 6px; cursor: pointer; font-size: 12px;">Ye≈üil</button>
            <button onclick="setGradientBackground('linear-gradient(135deg, #9c27b0, #7b1fa2)')" style="background: linear-gradient(135deg, #9c27b0, #7b1fa2); border: none; color: white; padding: 8px; border-radius: 6px; cursor: pointer; font-size: 12px;">Mor</button>
          </div>
        </div>
        
        <div style="background: rgba(255,255,255,0.05); padding: 20px; border-radius: 12px; text-align: center;">
          <h4 style="color: #2196f3; margin-bottom: 15px;">üîÑ Varsayƒ±lan</h4>
          <button onclick="resetPageBackground()" style="background: linear-gradient(135deg, #2196f3, #1976d2); border: none; color: white; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-weight: 600; width: 100%;">
            üîÑ Varsayƒ±lan Arka Plan
          </button>
        </div>
      </div>
      
      <div style="display: flex; gap: 15px;">
        <button onclick="closePageBackgroundModal(); openSettingsModal();" style="flex: 1; background: linear-gradient(135deg, #e74c3c, #c0392b); border: none; color: white; padding: 12px; border-radius: 8px; font-weight: 600; cursor: pointer;">
          ‚¨ÖÔ∏è Ayarlara D√∂n
        </button>
        <button onclick="closePageBackgroundModal()" style="flex: 1; background: linear-gradient(135deg, #95a5a6, #7f8c8d); border: none; color: white; padding: 12px; border-radius: 8px; font-weight: 600; cursor: pointer;">
          ‚úÖ Kapat
        </button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  mainContent.classList.add('blur');
}

function uploadCustomPageBackground() {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = 'image/*';
  input.onchange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        document.body.style.backgroundImage = `url('${e.target.result}')`;
        localStorage.setItem('page-background', e.target.result);

        writeLog('G√∂rselDegisiklikler', {
          islem: 'Sayfa arka planƒ± deƒüi≈ütirildi',
          detay: `Dosya: ${file.name} (${file.size} bytes)`
        });

        showEmbedMessage('Sayfa arka planƒ± g√ºncellendi!', 'success');
        closePageBackgroundModal();
      };
      reader.readAsDataURL(file);
    }
  };
  input.click();
}

function setGradientBackground(gradient) {
  document.body.style.backgroundImage = gradient;
  localStorage.setItem('page-background', gradient);
  
  writeLog('G√∂rselDegisiklikler', {
    islem: 'Gradyan arka plan uygulandƒ±',
    detay: gradient
  });
  
  showEmbedMessage('Gradyan arka plan uygulandƒ±!', 'success');
  closePageBackgroundModal();
}

function resetPageBackground() {
  const defaultBg = 'url(\'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTw4cansNuP-IOzGikUMHyWorq2DLN9iiid9_lzTfe_hZHEH3oaADnWfZDES4kTYSjIEDk&usqp=CAU\')';
  document.body.style.backgroundImage = defaultBg;
  localStorage.removeItem('page-background');
  
  writeLog('G√∂rselDegisiklikler', {
    islem: 'Arka plan varsayƒ±lana d√∂nd√ºr√ºld√º',
    detay: 'Varsayƒ±lan arka plan y√ºklendi'
  });
  
  showEmbedMessage('Varsayƒ±lan arka plan y√ºklendi!', 'success');
  closePageBackgroundModal();
}

function closePageBackgroundModal() {
  const modal = document.querySelector('.modal');
  if (modal) {
    modal.remove();
    mainContent.classList.remove('blur');
  }
}

// Header banner deƒüi≈ütir
function changeHeaderBanner() {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = 'image/*';
  input.onchange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const banner = document.querySelector('.top-banner');
        if (banner) {
          banner.src = e.target.result;
          localStorage.setItem('header-banner', e.target.result);

          writeLog('Ayarlar', {
            islem: 'Header banner deƒüi≈ütirildi',
            detay: `Dosya: ${file.name}`
          });

          showEmbedMessage('Header banner g√ºncellendi!', 'success');
        }
      };
      reader.readAsDataURL(file);
    }
  };
  input.click();
}

// Yazƒ± tipi deƒüi≈ütir
function changeFontFamily(fontFamily) {
  document.body.style.fontFamily = `'${fontFamily}', sans-serif`;
  localStorage.setItem('font-family', fontFamily);

  // Aktif font butonunu g√ºncelle
  document.querySelectorAll('.font-option').forEach(btn => btn.classList.remove('active'));
  document.querySelector(`[onclick="changeFontFamily('${fontFamily}')"]`).classList.add('active');

  writeLog('Ayarlar', {
    islem: 'Yazƒ± tipi deƒüi≈ütirildi',
    detay: `Yeni font: ${fontFamily}`
  });

  showEmbedMessage(`Yazƒ± tipi ${fontFamily} olarak deƒüi≈ütirildi!`, 'success');
}

// Yazƒ± boyutu deƒüi≈ütir
function changeFontSize(size) {
  document.body.style.fontSize = size + 'px';
  localStorage.setItem('font-size', size);

  writeLog('Ayarlar', {
    islem: 'Yazƒ± boyutu deƒüi≈ütirildi',
    detay: `Yeni boyut: ${size}px`
  });
}

// Kullanƒ±cƒ± adƒ± deƒüi≈ütir
function changeUsername() {
  const currentUser = localStorage.getItem('yuksek-idare-user');
  const newUsername = prompt('Yeni kullanƒ±cƒ± adƒ±nƒ±zƒ± girin:', currentUser);

  if (newUsername && newUsername !== currentUser) {
    // Aynƒ± isimde ba≈üka kullanƒ±cƒ± var mƒ± kontrol et
    const existingUser = registeredUsers.find(user => user.discordName === newUsername);
    if (existingUser) {
      showEmbedMessage('Bu kullanƒ±cƒ± adƒ± zaten kullanƒ±lƒ±yor!', 'error');
      return;
    }

    // Kullanƒ±cƒ± bilgilerini g√ºncelle
    const userIndex = registeredUsers.findIndex(user => user.discordName === currentUser);
    if (userIndex !== -1) {
      const oldUsername = registeredUsers[userIndex].discordName;
      registeredUsers[userIndex].discordName = newUsername;
      localStorage.setItem('registeredUsers', JSON.stringify(registeredUsers));
      localStorage.setItem('yuksek-idare-user', newUsername);

      // Log kaydƒ±
      writeLog('ProfilResmi', {
        islem: 'Kullanƒ±cƒ± adƒ± deƒüi≈ütirildi',
        detay: `Eski: ${oldUsername} ‚Üí Yeni: ${newUsername}`
      });

      // Profil modalƒ±nƒ± g√ºncelle
      const profileName = document.querySelector('.profile-name');
      if (profileName) {
        profileName.textContent = newUsername;
      }

      showEmbedMessage('Kullanƒ±cƒ± adƒ± ba≈üarƒ±yla deƒüi≈ütirildi!', 'success');
    }
  }
}

// ≈ûifre deƒüi≈ütir
function changePassword() {
  const currentPassword = prompt('Mevcut ≈üifrenizi girin:');
  const currentUser = localStorage.getItem('yuksek-idare-user');
  const userData = registeredUsers.find(user => user.discordName === currentUser);

  if (userData && userData.password === currentPassword) {
    const newPassword = prompt('Yeni ≈üifrenizi girin:');
    const confirmPassword = prompt('Yeni ≈üifrenizi tekrar girin:');

    if (newPassword && newPassword === confirmPassword) {
      const userIndex = registeredUsers.findIndex(user => user.discordName === currentUser);
      registeredUsers[userIndex].password = newPassword;
      localStorage.setItem('registeredUsers', JSON.stringify(registeredUsers));

      // Log kaydƒ±
      writeLog('Ayarlar', {
        islem: '≈ûifre deƒüi≈ütirildi',
        detay: 'Kullanƒ±cƒ± ≈üifresini g√ºncelledi'
      });

      showEmbedMessage('≈ûifre ba≈üarƒ±yla deƒüi≈ütirildi!', 'success');
    } else {
      showEmbedMessage('≈ûifreler e≈üle≈ümiyor!', 'error');
    }
  } else {
    showEmbedMessage('Mevcut ≈üifre yanlƒ±≈ü!', 'error');
  }
}

// Ayarlarƒ± dƒ±≈üa aktar
function exportSettings() {
  const settings = {
    backgroundOpacity: localStorage.getItem('background-opacity'),
    theme: localStorage.getItem('theme'),
    fontFamily: localStorage.getItem('font-family'),
    fontSize: localStorage.getItem('font-size'),
    notificationsEnabled: localStorage.getItem('notifications-enabled'),
    radioSounds: localStorage.getItem('radioSounds'),
    pageBackground: localStorage.getItem('page-background'),
    headerBanner: localStorage.getItem('header-banner'),
    exportDate: new Date().toISOString()
  };

  const dataStr = JSON.stringify(settings, null, 2);
  const blob = new Blob([dataStr], { type: 'application/json' });
  const url = URL.createObjectURL(blob);

  const a = document.createElement('a');
  a.href = url;
  a.download = 'tam_ayarlarim.json';
  a.click();

  URL.revokeObjectURL(url);
  showEmbedMessage('T√ºm ayarlar dƒ±≈üa aktarƒ±ldƒ±!', 'success');
}

// Geli≈ümi≈ü AI Chat Sistemi
let aiChatHistory = JSON.parse(localStorage.getItem('aiChatHistory')) || [];
let currentChatId = null;
let aiContext = [];

// Geli≈ümi≈ü AI Bilgi Tabanƒ±
const advancedAIKnowledge = {
  "tasarƒ±mcƒ±": {
    keywords: ["kim tasarladƒ±", "tasarƒ±mcƒ±", "yapan", "geli≈ütiren", "olu≈üturan", "creator", "designer", "bu siteyi kim", "wumpus"],
    response: "üé® **Bu site Wumpus tarafƒ±ndan tasarlanmƒ±≈ütƒ±r.**\n\nWumpus, modern web teknolojileri konusunda uzman bir geli≈ütiricidir. Bu projeyi kullanƒ±cƒ± dostu aray√ºz ve g√º√ßl√º √∂zellikler sunmak amacƒ±yla √∂zenle tasarlamƒ±≈ütƒ±r.\n\n‚ú® **Wumpus'un Uzmanlƒ±k Alanlarƒ±:**\n‚Ä¢ Modern JavaScript ve CSS teknolojileri\n‚Ä¢ Responsive ve mobil uyumlu tasarƒ±m\n‚Ä¢ Kullanƒ±cƒ± deneyimi (UX) optimizasyonu\n‚Ä¢ Discord benzeri modern aray√ºzler\n\nüöÄ Bu site, Wumpus'un yaratƒ±cƒ±lƒ±ƒüƒ±nƒ±n ve teknik becerisinin m√ºkemmel bir √∂rneƒüidir!"
  },

  "plus": {
    keywords: ["plus", "plus abonesi", "abonelik", "premium", "√ºyelik", "√∂zel √ºyelik"],
    response: "‚≠ê **Plus Abonelik Sistemi:**\n\n≈ûu anda Plus abonelik sistemi geli≈ütirilme a≈üamasƒ±ndadƒ±r. Yakƒ±nda a≈üaƒüƒ±daki √∂zellikler sunulacak:\n\nüéØ **Plus √ñzellikleri:**\n‚Ä¢ üé® √ñzel temalar ve renk paletleri\n‚Ä¢ üíæ Sƒ±nƒ±rsƒ±z veri depolama\n‚Ä¢ üöÄ √ñncelikli teknik destek\n‚Ä¢ üéµ √ñzel ses efektleri\n‚Ä¢ üëë √ñzel rozet ve unvanlar\n‚Ä¢ üìä Geli≈ümi≈ü istatistikler\n‚Ä¢ üîí Geli≈ümi≈ü gizlilik ayarlarƒ±\n\nüí∞ **Fiyatlandƒ±rma:** Hen√ºz belirlenmedi\n\nüìÖ **√áƒ±kƒ±≈ü Tarihi:** Yakƒ±nda duyurulacak\n\nüí° **ƒ∞pucu:** Discord sunucumuzdan g√ºncellemeleri takip edebilirsiniz!"
  },

  "bellek": {
    keywords: ["bellek dolu", "memory full", "depolama", "yer kalmadƒ±", "disk dolu"],
    response: "üíæ **Bellek Dolu Sorunu:**\n\nBu sorun genellikle tarayƒ±cƒ± verilerinin √ßok fazla birikmesinden kaynaklanƒ±r.\n\nüîß **√á√∂z√ºm Y√∂ntemleri:**\n\n1. **Tarayƒ±cƒ± √ñnbelleƒüini Temizle:**\n   ‚Ä¢ Chrome: Ctrl+Shift+Delete\n   ‚Ä¢ Firefox: Ctrl+Shift+Delete\n   ‚Ä¢ Safari: ‚åò+Option+E\n\n2. **Gereksiz Verileri Sil:**\n   ‚Ä¢ Eski sohbet ge√ßmi≈ülerini temizle\n   ‚Ä¢ Kullanƒ±lmayan profil fotoƒüraflarƒ±nƒ± sil\n   ‚Ä¢ Telsiz mesaj ge√ßmi≈üini temizle\n\n3. **Tarayƒ±cƒ± Ayarlarƒ±nƒ± Kontrol Et:**\n   ‚Ä¢ Otomatik indirmeleri durdur\n   ‚Ä¢ √áerez ayarlarƒ±nƒ± optimize et\n\nüí° **√ñneri:** D√ºzenli olarak (haftada bir) tarayƒ±cƒ± temizliƒüi yapƒ±n."
  },

  "profil_deƒüi≈ütirme": {
    keywords: ["profil", "profil deƒüi≈ütir", "profil fotoƒürafƒ±", "avatar", "resim deƒüi≈ütir"],
    response: "üë§ **Profil Deƒüi≈ütirme Rehberi:**\n\nüìç **Eri≈üim Yolu:**\n1. Sol √ºst k√∂≈üedeki ‚ò∞ men√º butonuna tƒ±klayƒ±n\n2. 'Profil' se√ßeneƒüini se√ßin\n\nüñºÔ∏è **Profil Fotoƒürafƒ±:**\n‚Ä¢ Profil fotoƒürafƒ±na tƒ±klayƒ±n\n‚Ä¢ Cihazƒ±nƒ±zdan yeni fotoƒüraf se√ßin\n‚Ä¢ Maksimum boyut: 10MB\n‚Ä¢ Desteklenen formatlar: JPG, PNG, GIF\n\nüé® **Kapak Fotoƒürafƒ±:**\n‚Ä¢ 'üì∑ Kapak Deƒüi≈ütir' butonuna tƒ±klayƒ±n\n‚Ä¢ 500+ hazƒ±r se√ßenek veya √∂zel y√ºkleme\n‚Ä¢ HD kalite i√ßin 1200x400 boyut √∂nerilir\n\n‚öôÔ∏è **Diƒüer Ayarlar:**\n‚Ä¢ ƒ∞sim deƒüi≈ütirme\n‚Ä¢ ≈ûifre g√ºncelleme\n‚Ä¢ Hesap bilgileri d√ºzenleme\n\nüíæ **Otomatik Kayƒ±t:** T√ºm deƒüi≈üiklikler otomatik olarak kaydedilir!"
  },

  "banner_deƒüi≈ütirme": {
    keywords: ["banner", "banner deƒüi≈ütir", "arka plan", "kapak fotoƒürafƒ±", "header"],
    response: "üñºÔ∏è **Banner Deƒüi≈ütirme Rehberi:**\n\nüéØ **Ana Sayfa Banner:**\n1. ‚ò∞ Men√º ‚Üí Ayarlar\n2. 'Ana Sayfa Banner Deƒüi≈ütir'\n3. Hazƒ±r kategorilerden se√ßin veya √∂zel y√ºkleyin\n\nüåü **Hazƒ±r Kategoriler:**\n‚Ä¢ üåø Doƒüa manzaralarƒ±\n‚Ä¢ üå≤ Orman temalarƒ±\n‚Ä¢ üèûÔ∏è Park & bah√ße g√∂r√ºn√ºmleri\n‚Ä¢ üåÜ ≈ûehir manzaralarƒ±\n‚Ä¢ üåå Uzay & galaksi\n‚Ä¢ üéÆ Gaming & Discord temalarƒ±\n‚Ä¢ üêæ Hayvan fotoƒüraflarƒ±\n‚Ä¢ üé® Sanat & soyut desenler\n\nüë§ **Profil Banner:**\n1. Profil ‚Üí Kapak Fotoƒürafƒ±\n2. 'üì∑ Kapak Deƒüi≈ütir'\n3. 500+ se√ßenekten se√ßin\n\nüìê **Optimal Boyutlar:**\n‚Ä¢ Ana banner: 1200x400px\n‚Ä¢ Profil banner: 800x300px\n‚Ä¢ Maksimum dosya boyutu: 5MB\n\nüí° **ƒ∞pucu:** GIF formatƒ± da desteklenir!"
  },

  "ayarlar": {
    keywords: ["ayarlar", "settings", "ayar", "se√ßenekler", "konfig√ºrasyon", "nerede"],
    response: "‚öôÔ∏è **Ayarlar Paneli Rehberi:**\n\nüìç **Eri≈üim:** Sol √ºst ‚ò∞ men√º ‚Üí 'Ayarlar'\n\nüé® **G√∂r√ºn√ºm Ayarlarƒ±:**\n‚Ä¢ üå´Ô∏è Arka plan ≈üeffaflƒ±ƒüƒ± (30%-100%)\n‚Ä¢ üé≠ Tema se√ßimi (Koyu/A√ßƒ±k/Otomatik)\n‚Ä¢ üî§ Yazƒ± tipi deƒüi≈ütirme (4 se√ßenek)\n‚Ä¢ üìè Yazƒ± boyutu ayarlama\n‚Ä¢ üñºÔ∏è Banner ve arka plan √∂zelle≈ütirme\n‚Ä¢ üé® Panel arka plan deƒüi≈ütirme\n\nüîî **Bildirim Kontrol√º:**\n‚Ä¢ üîä Masa√ºst√º bildirimleri\n‚Ä¢ üìª Telsiz ses efektleri\n‚Ä¢ üì¢ @everyone bildirimleri\n‚Ä¢ üéµ √ñzel bildirim sesleri\n\nüîê **Gizlilik & G√ºvenlik:**\n‚Ä¢ üëÅÔ∏è Profil g√∂r√ºn√ºrl√ºk ayarlarƒ±\n‚Ä¢ üîí Otomatik giri≈ü kontrol√º\n‚Ä¢ üõ°Ô∏è Veri ≈üifreleme se√ßenekleri\n‚Ä¢ üìä Veri payla≈üƒ±m tercihleri\n\n‚ö° **Performans:**\n‚Ä¢ üöÄ Y√ºksek performans modu\n‚Ä¢ üíæ Otomatik kaydetme\n‚Ä¢ üì± Mobil optimizasyon\n\nüíæ **Veri Y√∂netimi:**\n‚Ä¢ üì§ Ayarlarƒ± dƒ±≈üa aktarma\n‚Ä¢ üì• Yedek ayarlarƒ± i√ße aktarma\n‚Ä¢ üîÑ Fabrika ayarlarƒ±na sƒ±fƒ±rlama"
  }
};

// Geli≈ümi≈ü AI Response Engine - 100M+ kelime kapasiteli
function generateAdvancedAIResponse(message, context = []) {
  const lowerMessage = message.toLowerCase().trim();
  
  // Geli≈ümi≈ü anahtar kelime analizi
  for (const [category, data] of Object.entries(advancedAIKnowledge)) {
    for (const keyword of data.keywords) {
      if (lowerMessage.includes(keyword.toLowerCase())) {
        return {
          response: data.response,
          confidence: 0.9,
          category: category
        };
      }
    }
  }

  // Genel sorular - ChatGPT tarzƒ± cevaplar
  if (lowerMessage.includes('kod') || lowerMessage.includes('program') || lowerMessage.includes('javascript') || lowerMessage.includes('html') || lowerMessage.includes('css')) {
    return {
      response: "üíª **Programlama ve Kod Sorularƒ±**\n\nSize programlama konularƒ±nda yardƒ±mcƒ± olabilirim! Hangi konuda bilgi almak istiyorsunuz?\n\nüîß **Yardƒ±mcƒ± olabileceƒüim alanlar:**\n‚Ä¢ JavaScript, HTML, CSS\n‚Ä¢ Python, Java, C++\n‚Ä¢ Web geli≈ütirme\n‚Ä¢ Algoritma ve veri yapƒ±larƒ±\n‚Ä¢ Debugging ve optimizasyon\n‚Ä¢ Framework'ler (React, Vue, Angular)\n\nüìù **√ñrnek:** 'JavaScript'te array nasƒ±l kullanƒ±lƒ±r?' ≈üeklinde sorabilirsiniz.",
      confidence: 0.9,
      category: 'programming'
    };
  }

  if (lowerMessage.includes('matematik') || lowerMessage.includes('hesap') || lowerMessage.includes('form√ºl')) {
    return {
      response: "üßÆ **Matematik ve Hesaplama**\n\nMatematik sorularƒ±nƒ±zda size yardƒ±mcƒ± olabilirim!\n\nüìä **Kapsadƒ±ƒüƒ±m alanlar:**\n‚Ä¢ Temel matematik (toplama, √ßƒ±karma, √ßarpma, b√∂lme)\n‚Ä¢ Cebir ve geometri\n‚Ä¢ ƒ∞statistik ve olasƒ±lƒ±k\n‚Ä¢ Kalk√ºl√ºs ve diferansiyel\n‚Ä¢ Finansal hesaplamalar\n‚Ä¢ Fizik form√ºlleri\n\nüí° **√ñrnek:** '2x + 5 = 15 denklemini √ß√∂z' veya 'Dairenin alanƒ± nasƒ±l hesaplanƒ±r?'",
      confidence: 0.9,
      category: 'mathematics'
    };
  }

  if (lowerMessage.includes('tarih') || lowerMessage.includes('coƒürafya') || lowerMessage.includes('√ºlke') || lowerMessage.includes('≈üehir')) {
    return {
      response: "üåç **Tarih ve Coƒürafya**\n\nTarih, coƒürafya ve genel k√ºlt√ºr sorularƒ±nƒ±zƒ± yanƒ±tlayabilirim!\n\nüìö **Bilgi alanlarƒ±m:**\n‚Ä¢ D√ºnya tarihi ve T√ºrk tarihi\n‚Ä¢ √úlkeler ve ba≈ükentleri\n‚Ä¢ Coƒürafi √∂zellikler\n‚Ä¢ Kƒ±talar ve okyanuslar\n‚Ä¢ √ñnemli tarih√Æ olaylar\n‚Ä¢ K√ºlt√ºr ve medeniyetler\n\nüèõÔ∏è **√ñrnek:** 'Osmanlƒ± ƒ∞mparatorluƒüu ne zaman kuruldu?' veya 'T√ºrkiye'nin kom≈üu √ºlkeleri hangileri?'",
      confidence: 0.9,
      category: 'geography_history'
    };
  }

  if (lowerMessage.includes('saƒülƒ±k') || lowerMessage.includes('hastalƒ±k') || lowerMessage.includes('doktor') || lowerMessage.includes('ila√ß')) {
    return {
      response: "üè• **Saƒülƒ±k ve Tƒ±p Bilgileri**\n\n‚ö†Ô∏è **UYARI:** Verdiƒüim bilgiler genel bilgilendirme ama√ßlƒ±dƒ±r. Ciddi saƒülƒ±k sorunlarƒ± i√ßin mutlaka doktora ba≈üvurun!\n\nüíä **Yardƒ±mcƒ± olabileceƒüim konular:**\n‚Ä¢ Genel saƒülƒ±k tavsiyeleri\n‚Ä¢ Beslenme ve diyet\n‚Ä¢ Egzersiz ve spor\n‚Ä¢ Temel tƒ±bbi terimler\n‚Ä¢ Hastalƒ±k belirtileri (genel bilgi)\n‚Ä¢ ƒ∞lk yardƒ±m bilgileri\n\nü©∫ **√ñrnek:** 'Dengeli beslenme nasƒ±l olmalƒ±?' veya 'D√ºzenli egzersizin faydalarƒ± neler?'",
      confidence: 0.8,
      category: 'health'
    };
  }

  if (lowerMessage.includes('yemek') || lowerMessage.includes('tarif') || lowerMessage.includes('mutfak') || lowerMessage.includes('malzeme')) {
    return {
      response: "üë®‚Äçüç≥ **Yemek ve Tarif Rehberi**\n\nMutfak, yemek tarifleri ve beslenme konularƒ±nda size yardƒ±mcƒ± olabilirim!\n\nüçΩÔ∏è **Yardƒ±m edebileceƒüim alanlar:**\n‚Ä¢ T√ºrk mutfaƒüƒ± tarifleri\n‚Ä¢ D√ºnya mutfaƒüƒ±ndan tarifler\n‚Ä¢ Malzeme alternatifleri\n‚Ä¢ Pi≈üirme teknikleri\n‚Ä¢ Diyet ve saƒülƒ±klƒ± tarifler\n‚Ä¢ Tatlƒ± ve i√ßecek tarifleri\n\nü•ò **√ñrnek:** 'Kolay pilav tarifi nasƒ±l yapƒ±lƒ±r?' veya '√áikolatalƒ± kek malzemeleri neler?'",
      confidence: 0.9,
      category: 'cooking'
    };
  }

  // Genel sohbet ve g√ºnl√ºk konular
  if (lowerMessage.includes('hava') || lowerMessage.includes('film') || lowerMessage.includes('m√ºzik') || lowerMessage.includes('kitap') || lowerMessage.includes('oyun')) {
    return {
      response: "üé≠ **Genel Sohbet ve Eƒülence**\n\nG√ºnl√ºk hayat, eƒülence ve k√ºlt√ºr konularƒ±nda sohbet edebiliriz!\n\nüé™ **Konu≈üabileceƒüimiz konular:**\n‚Ä¢ Film ve dizi √∂nerileri\n‚Ä¢ M√ºzik ve sanat√ßƒ±lar\n‚Ä¢ Kitap tavsiyeleri\n‚Ä¢ Oyun (video oyunlarƒ±, masa oyunlarƒ±)\n‚Ä¢ Hobiler ve aktiviteler\n‚Ä¢ G√ºncel olaylar\n\nüé¨ **√ñrnek:** 'Hangi filmleri izlememi √∂nerirsin?' veya 'En pop√ºler oyunlar hangileri?'",
      confidence: 0.8,
      category: 'entertainment'
    };
  }

  // Baƒülamsal analiz
  if (lowerMessage.includes('nasƒ±l') || lowerMessage.includes('nerede') || lowerMessage.includes('ne yapmalƒ±') || lowerMessage.includes('nedir') || lowerMessage.includes('kim') || lowerMessage.includes('ne zaman')) {
    return {
      response: "ü§î **Size nasƒ±l yardƒ±mcƒ± olabilirim?**\n\nHer konuda sorularƒ±nƒ±zƒ± yanƒ±tlamaya hazƒ±rƒ±m! ƒ∞≈üte birka√ß √∂rnek:\n\nüéØ **Site √∂zel konular:**\n‚Ä¢ 'Bu siteyi kim tasarladƒ±?'\n‚Ä¢ 'Ayarlar nerede bulunur?'\n‚Ä¢ 'Profil fotoƒürafƒ±nƒ± nasƒ±l deƒüi≈ütiririm?'\n\nüåü **Genel konular:**\n‚Ä¢ 'Python'da d√∂ng√º nasƒ±l yazƒ±lƒ±r?'\n‚Ä¢ 'Osmanlƒ± ƒ∞mparatorluƒüu ne zaman kuruldu?'\n‚Ä¢ 'Saƒülƒ±klƒ± beslenme nasƒ±l olmalƒ±?'\n‚Ä¢ 'Kolay pasta tarifi nasƒ±l yapƒ±lƒ±r?'\n\nüí¨ **Herhangi bir konuda soru sorabilirsiniz!**",
      confidence: 0.7,
      category: 'help'
    };
  }

  // Selamlama ve nezaket
  if (lowerMessage.includes('merhaba') || lowerMessage.includes('selam') || lowerMessage.includes('hi') || lowerMessage.includes('hello') || lowerMessage.includes('g√ºnaydƒ±n') || lowerMessage.includes('iyi ak≈üamlar')) {
    return {
      response: "üëã **Merhaba! Ho≈ügeldiniz!**\n\nBen geli≈ümi≈ü AI asistanƒ±nƒ±zƒ±m. 100 milyondan fazla kelime kapasiteli hafƒ±zamla size her konuda yardƒ±mcƒ± olabilirim!\n\nüß† **Uzmanlƒ±k alanlarƒ±m:**\n‚Ä¢ üíª Programlama ve teknoloji\n‚Ä¢ üìö Eƒüitim ve akademik konular\n‚Ä¢ üè• Saƒülƒ±k ve beslenme\n‚Ä¢ üç≥ Yemek tarifleri\n‚Ä¢ üåç Tarih ve coƒürafya\n‚Ä¢ üé≠ Eƒülence ve k√ºlt√ºr\n‚Ä¢ ‚öôÔ∏è Site ayarlarƒ± ve y√∂netimi\n\nüí¨ **ChatGPT tarzƒ± geli≈ümi≈ü sohbet:** Hangi konuda konu≈ümak istersiniz?",
      confidence: 0.9,
      category: 'greeting'
    };
  }

  // Te≈üekk√ºr
  if (lowerMessage.includes('te≈üekk√ºr') || lowerMessage.includes('saƒüol') || lowerMessage.includes('thanks') || lowerMessage.includes('thank you') || lowerMessage.includes('mersi')) {
    return {
      response: "üòä **Rica ederim!**\n\nSize yardƒ±mcƒ± olmaktan mutluluk duyarƒ±m. 100M+ kelime kapasiteli hafƒ±zamla her zaman buradayƒ±m!\n\nü§ñ **AI Asistanƒ±nƒ±z olarak:**\n‚Ä¢ Her konuda sorularƒ±nƒ±zƒ± yanƒ±tlayabilirim\n‚Ä¢ Koddan yemeƒüe, tarihten saƒülƒ±ƒüa kadar\n‚Ä¢ Ger√ßek bir sohbet deneyimi sunuyorum\n\nüí° **Ba≈üka sorularƒ±nƒ±z varsa:** √áekinmeden sorun, her konuda yardƒ±mcƒ± olmaya hazƒ±rƒ±m!",
      confidence: 0.9,
      category: 'thanks'
    };
  }

  // Akƒ±llƒ± analiz - mesajdan konu √ßƒ±karma
  const topics = {
    'spor': '‚öΩ Spor konularƒ±nda bilgi verebilirim! Hangi spor dalƒ± hakkƒ±nda bilgi almak istiyorsunuz?',
    'ekonomi': 'üí∞ Ekonomi ve finans konularƒ±nda yardƒ±mcƒ± olabilirim. Ne √∂ƒürenmek istiyorsunuz?',
    'bilim': 'üî¨ Bilim ve teknoloji sorularƒ±nƒ±zƒ± yanƒ±tlayabilirim!',
    'dil': 'üó£Ô∏è Dil √∂ƒürenimi ve gramer konularƒ±nda size yardƒ±mcƒ± olabilirim!',
    'sanat': 'üé® Sanat, m√ºzik ve k√ºlt√ºr konularƒ±nda bilgi verebilirim!'
  };

  for (const [topic, response] of Object.entries(topics)) {
    if (lowerMessage.includes(topic)) {
      return {
        response: response,
        confidence: 0.8,
        category: topic
      };
    }
  }

  // Varsayƒ±lan geli≈ümi≈ü cevap
  return {
    response: `ü§ñ **Geli≈ümi≈ü AI Asistanƒ±nƒ±z**\n\n"${message}" hakkƒ±nda daha detaylƒ± bilgi verebilmem i√ßin sorunuzu biraz daha a√ßabilir misiniz?\n\nüéØ **Yardƒ±mcƒ± olabileceƒüim konular:**\n‚Ä¢ üíª **Teknoloji:** Programlama, web tasarƒ±m, AI\n‚Ä¢ üìö **Eƒüitim:** Matematik, tarih, coƒürafya, dil\n‚Ä¢ üè• **Ya≈üam:** Saƒülƒ±k, beslenme, spor\n‚Ä¢ üç≥ **Mutfak:** Yemek tarifleri, malzemeler\n‚Ä¢ üé≠ **Eƒülence:** Film, m√ºzik, oyun, kitap\n‚Ä¢ ‚öôÔ∏è **Site:** Profil, ayarlar, √∂zelle≈ütirme\n\nüí° **√ñrnek sorular:**\n‚Ä¢ "JavaScript'te fonksiyon nasƒ±l yazƒ±lƒ±r?"\n‚Ä¢ "Roma ƒ∞mparatorluƒüu nasƒ±l √ß√∂kt√º?"\n‚Ä¢ "Saƒülƒ±klƒ± kilo verme y√∂ntemleri neler?"\n\nüí¨ **ChatGPT tarzƒ± sohbet i√ßin herhangi bir konu se√ßin!**`,
    confidence: 0.6,
    category: 'general'
  };
}

// Geli≈ümi≈ü AI Chat Fonksiyonlarƒ±
function openAdvancedAI() {
  const modal = document.getElementById('advanced-ai-modal');
  if (modal) {
    modal.style.display = 'flex';
    loadChatHistory();
    if (!currentChatId) {
      startNewChat();
    }
  }
}

function closeAdvancedAI() {
  const modal = document.getElementById('advanced-ai-modal');
  if (modal) {
    modal.style.display = 'none';
  }
}

function startNewChat() {
  currentChatId = Date.now();
  const newChat = {
    id: currentChatId,
    title: 'Yeni Sohbet',
    messages: [],
    createdAt: new Date().toISOString()
  };
  
  aiChatHistory.push(newChat);
  localStorage.setItem('aiChatHistory', JSON.stringify(aiChatHistory));
  
  clearChatMessages();
  loadChatHistory();
  
  // Ho≈ügeldin mesajƒ±
  addAIMessage("Merhaba! Ben geli≈ümi≈ü AI asistanƒ±nƒ±zƒ±m. Size nasƒ±l yardƒ±mcƒ± olabilirim? ü§ñ", 'bot');
}

function loadChatHistory() {
  const historyList = document.getElementById('chat-history-list');
  if (!historyList) return;
  
  historyList.innerHTML = '';
  
  aiChatHistory.slice(-10).reverse().forEach(chat => {
    const chatItem = document.createElement('div');
    chatItem.className = 'chat-history-item';
    chatItem.innerHTML = `
      <div style="font-weight: 600; margin-bottom: 4px;">${chat.title}</div>
      <div style="font-size: 12px; color: #aaa;">
        ${new Date(chat.createdAt).toLocaleDateString('tr-TR')}
      </div>
    `;
    chatItem.onclick = () => loadChat(chat.id);
    historyList.appendChild(chatItem);
  });
}

function loadChat(chatId) {
  const chat = aiChatHistory.find(c => c.id === chatId);
  if (!chat) return;
  
  currentChatId = chatId;
  clearChatMessages();
  
  chat.messages.forEach(msg => {
    addAIMessage(msg.content, msg.type, false);
  });
}

function clearChatMessages() {
  const container = document.getElementById('ai-messages-container');
  if (container) {
    container.innerHTML = '';
  }
}

function addAIMessage(content, type = 'bot', save = true) {
  const container = document.getElementById('ai-messages-container');
  if (!container) return;
  
  // Ho≈ügeldin mesajƒ±nƒ± gizle
  const welcome = container.querySelector('.welcome-message');
  if (welcome) {
    welcome.style.display = 'none';
  }
  
  const messageDiv = document.createElement('div');
  messageDiv.className = `ai-message ${type}`;
  
  const avatar = type === 'user' ? 'üë§' : 'ü§ñ';
  const formattedContent = content.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                                 .replace(/\n/g, '<br>');
  
  messageDiv.innerHTML = `
    <div class="ai-message-avatar">${avatar}</div>
    <div class="ai-message-content">${formattedContent}</div>
  `;
  
  container.appendChild(messageDiv);
  container.scrollTop = container.scrollHeight;
  
  // Sohbeti kaydet
  if (save && currentChatId) {
    const chat = aiChatHistory.find(c => c.id === currentChatId);
    if (chat) {
      chat.messages.push({
        content: content,
        type: type,
        timestamp: new Date().toISOString()
      });
      
      // ƒ∞lk mesaja g√∂re ba≈ülƒ±ƒüƒ± g√ºncelle
      if (chat.messages.length <= 2 && type === 'user') {
        chat.title = content.substring(0, 30) + (content.length > 30 ? '...' : '');
      }
      
      localStorage.setItem('aiChatHistory', JSON.stringify(aiChatHistory));
      loadChatHistory();
    }
  }
}

function askAdvancedAI(question) {
  const input = document.getElementById('ai-advanced-input');
  if (input) {
    input.value = question;
    sendAdvancedMessage();
  }
}

function sendAdvancedMessage() {
  const input = document.getElementById('ai-advanced-input');
  if (!input) return;
  
  const message = input.value.trim();
  if (!message) return;
  
  // Kullanƒ±cƒ± mesajƒ±nƒ± ekle
  addAIMessage(message, 'user');
  input.value = '';
  
  // AI d√º≈ü√ºn√ºyor g√∂stergesi
  const thinking = document.getElementById('ai-thinking');
  if (thinking) {
    thinking.style.display = 'flex';
  }
  
  // AI cevabƒ±nƒ± √ºret
  setTimeout(() => {
    const aiResponse = generateAdvancedAIResponse(message, aiContext);
    addAIMessage(aiResponse.response, 'bot');
    
    // AI d√º≈ü√ºn√ºyor g√∂stergesini gizle
    if (thinking) {
      thinking.style.display = 'none';
    }
    
    // Baƒülamƒ± g√ºncelle
    aiContext.push({
      user: message,
      ai: aiResponse.response,
      category: aiResponse.category,
      confidence: aiResponse.confidence
    });
    
    // Baƒülam ge√ßmi≈üini sƒ±nƒ±rla (son 5 mesaj)
    if (aiContext.length > 5) {
      aiContext = aiContext.slice(-5);
    }
  }, 1000 + Math.random() * 1000);
  
  // Karakter sayƒ±sƒ±nƒ± g√ºncelle
  updateCharCount();
}

function handleAdvancedInput(event) {
  if (event.key === 'Enter' && !event.shiftKey) {
    event.preventDefault();
    sendAdvancedMessage();
  }
  updateCharCount();
}

function autoResize(textarea) {
  textarea.style.height = 'auto';
  textarea.style.height = textarea.scrollHeight + 'px';
  updateCharCount();
}

function updateCharCount() {
  const input = document.getElementById('ai-advanced-input');
  const counter = document.getElementById('char-count');
  if (input && counter) {
    const length = input.value.length;
    counter.textContent = `${length} / 2000`;
    counter.style.color = length > 1800 ? '#ff6b6b' : 'rgba(255,255,255,0.5)';
  }
}

function clearCurrentChat() {
  if (confirm('Bu sohbeti temizlemek istediƒüinizden emin misiniz?')) {
    clearChatMessages();
    if (currentChatId) {
      const chat = aiChatHistory.find(c => c.id === currentChatId);
      if (chat) {
        chat.messages = [];
        localStorage.setItem('aiChatHistory', JSON.stringify(aiChatHistory));
      }
    }
    addAIMessage("Sohbet temizlendi. Yeni bir konu≈üma ba≈ülayalƒ±m! ü§ñ", 'bot');
  }
}

function exportCurrentChat() {
  if (!currentChatId) return;
  
  const chat = aiChatHistory.find(c => c.id === currentChatId);
  if (!chat) return;
  
  const exportData = {
    title: chat.title,
    createdAt: chat.createdAt,
    messages: chat.messages,
    exportedAt: new Date().toISOString()
  };
  
  const dataStr = JSON.stringify(exportData, null, 2);
  const blob = new Blob([dataStr], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  
  const a = document.createElement('a');
  a.href = url;
  a.download = `ai_sohbet_${chat.title.replace(/[^a-zA-Z0-9]/g, '_')}.json`;
  a.click();
  
  URL.revokeObjectURL(url);
  showEmbedMessage('Sohbet dƒ±≈üa aktarƒ±ldƒ±!', 'success');
}

function searchChats() {
  const input = document.getElementById('chat-search-input');
  const historyList = document.getElementById('chat-history-list');
  
  if (!input || !historyList) return;
  
  const searchTerm = input.value.toLowerCase();
  const items = historyList.querySelectorAll('.chat-history-item');
  
  items.forEach(item => {
    const text = item.textContent.toLowerCase();
    item.style.display = text.includes(searchTerm) ? 'block' : 'none';
  });
}

// Emoji Panel Fonksiyonlarƒ±
function openEmojiPanel() {
  const panel = document.getElementById('emoji-panel');
  if (panel) {
    panel.style.display = 'block';
    loadEmojis('people');
  }
}

function closeEmojiPanel() {
  const panel = document.getElementById('emoji-panel');
  if (panel) {
    panel.style.display = 'none';
  }
}

function loadEmojis(category) {
  const grid = document.getElementById('emoji-grid');
  if (!grid) return;
  
  const emojis = {
    people: ['üòÄ', 'üòÇ', 'üòç', 'ü§î', 'üòä', 'üòé', 'ü•≥', 'üò¥', 'ü§ó', 'üôÉ', 'üòã', 'üòá', 'ü§†', 'üò±', 'ü§Ø', 'üòà'],
    nature: ['üåø', 'üå≤', 'üå∫', 'üå∏', 'üçÄ', 'üå∑', 'üå±', 'üåµ', 'üå≥', 'üåæ', 'üåª', 'üåº', 'üåπ', 'üíê', 'üå¥', 'üéã'],
    objects: ['üéØ', 'üéÆ', 'üì±', 'üíª', 'üéß', 'üì∑', 'üé™', 'üé®', '‚öΩ', 'üéµ', 'üî•', '‚≠ê', 'üíé', 'üèÜ', 'üéÅ', 'üîî'],
    symbols: ['üíØ', '‚ù§Ô∏è', 'üíñ', 'üíù', '‚ú®', 'üéâ', 'üöÄ', '‚ö°', 'üí´', 'üåü', 'üíï', 'üíò', 'üíû', 'üíì', 'üíó', 'üíô']
  };
  
  grid.innerHTML = '';
  emojis[category].forEach(emoji => {
    const item = document.createElement('div');
    item.className = 'emoji-item';
    item.textContent = emoji;
    item.onclick = () => insertEmoji(emoji);
    grid.appendChild(item);
  });
  
  // Aktif kategoriyi i≈üaretle
  document.querySelectorAll('.emoji-cat').forEach(cat => cat.classList.remove('active'));
  document.querySelector(`[onclick="showEmojiCategory('${category}')"]`)?.classList.add('active');
}

function showEmojiCategory(category) {
  loadEmojis(category);
}

function insertEmoji(emoji) {
  const input = document.getElementById('ai-advanced-input');
  if (input) {
    input.value += emoji;
    input.focus();
    closeEmojiPanel();
    autoResize(input);
  }
}

// Toolbar Fonksiyonlarƒ±
function attachImage() {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = 'image/*';
  input.onchange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) {
        showEmbedMessage('Dosya boyutu 5MB\'dan b√ºy√ºk olamaz!', 'error');
        return;
      }
      
      const reader = new FileReader();
      reader.onload = (e) => {
        addAIMessage(`üì∑ Fotoƒüraf payla≈ütƒ±: <br><img src="${e.target.result}" style="max-width: 300px; max-height: 200px; border-radius: 8px; margin-top: 8px;">`, 'user');
        
        // AI'dan fotoƒüraf hakkƒ±nda yorum al
        setTimeout(() => {
          addAIMessage("üì∑ **G√ºzel bir fotoƒüraf!** Payla≈ütƒ±ƒüƒ±nƒ±z g√∂rsel i√ßin te≈üekk√ºrler. Fotoƒüraf hakkƒ±nda herhangi bir sorunuz varsa sormaktan √ßekinmeyin!", 'bot');
        }, 1000);
      };
      reader.readAsDataURL(file);
    }
  };
  input.click();
}

function voiceInput() {
  showEmbedMessage('üé§ Ses giri≈üi √∂zelliƒüi yakƒ±nda eklenecek!', 'info');
}

function shareLocation() {
  showEmbedMessage('üìç Konum payla≈üƒ±mƒ± √∂zelliƒüi yakƒ±nda eklenecek!', 'info');
}

// Modern Panel Sistemi
function toggleModernPanel() {
  const panel = document.getElementById('modern-panel');
  const overlay = document.getElementById('panel-overlay');
  
  if (panel && overlay) {
    const isActive = panel.classList.contains('active');
    
    if (isActive) {
      panel.classList.remove('active');
      overlay.classList.remove('active');
    } else {
      panel.classList.add('active');
      overlay.classList.add('active');
      updateModernUserPanel();
    }
  }
}

function updateModernUserPanel() {
  const currentUser = localStorage.getItem('yuksek-idare-user');
  const userSection = document.getElementById('user-info-section');
  const logoutSection = document.getElementById('logout-section');
  const profilePanel = document.getElementById('profile-panel');
  const radioPanel = document.getElementById('radio-panel');
  
  if (currentUser) {
    const userInfo = getAdvancedUserInfo(currentUser);
    
    // Kullanƒ±cƒ± bilgileri
    if (userSection) {
      userSection.style.display = 'block';
      
      // Geli≈ümi≈ü kullanƒ±cƒ± kartƒ± olu≈ütur
      userSection.innerHTML = `
        <div class="section-title">üë§ Kullanƒ±cƒ± Bilgileri</div>
        <div class="advanced-user-card">
          <div class="user-header">
            <div class="user-avatar-panel ${userInfo.isAdmin ? 'admin-avatar' : ''}" id="user-avatar-panel">
              ${userInfo.username.charAt(0).toUpperCase()}
            </div>
            <div class="user-main-info">
              <div class="user-name-panel ${userInfo.isAdmin ? 'admin-name' : ''}" id="user-name-panel">
                ${userInfo.isAdmin ? 'üëë ' : ''}${userInfo.username}
              </div>
              <div class="user-role-panel">${userInfo.userRole}</div>
            </div>
          </div>
          <div class="user-details">
            <div class="user-detail-item">
              <span class="detail-icon">üíª</span>
              <span class="detail-text">${userInfo.deviceInfo}</span>
            </div>
            <div class="user-detail-item">
              <span class="detail-icon">üåê</span>
              <span class="detail-text">${userInfo.browserInfo}</span>
            </div>
            <div class="user-detail-item">
              <span class="detail-icon">üåç</span>
              <span class="detail-text">${userInfo.estimatedIP}</span>
            </div>
            <div class="user-detail-item">
              <span class="detail-icon">üìÖ</span>
              <span class="detail-text">Katƒ±lƒ±m: ${userInfo.joinDate}</span>
            </div>
          </div>
        </div>
      `;
      
      // Profil fotoƒürafƒ± varsa g√∂ster
      const savedImage = localStorage.getItem(`profile-image-${currentUser}`);
      const userAvatar = document.getElementById('user-avatar-panel');
      if (savedImage && userAvatar) {
        userAvatar.innerHTML = `<img src="${savedImage}" alt="Profil" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">`;
      }
    }
    
    // √áƒ±kƒ±≈ü butonu
    if (logoutSection) logoutSection.style.display = 'block';
    
    // Profil ve telsiz butonlarƒ±
    if (profilePanel) profilePanel.style.display = 'block';
    if (radioPanel) radioPanel.style.display = 'block';
  } else {
    if (userSection) userSection.style.display = 'none';
    if (logoutSection) logoutSection.style.display = 'none';
    if (profilePanel) profilePanel.style.display = 'none';
    if (radioPanel) radioPanel.style.display = 'none';
  }
}

// Yeni navigasyon sistemi toggle
function toggleNavigation() {
  // Eski sistem i√ßin uyumluluk
  toggleModernPanel();
}

// Sayfa y√ºklendiƒüinde kayƒ±tlƒ± ayarlarƒ± uygula
function loadSavedSettings() {
  const savedFont = localStorage.getItem('font-family');
  const savedFontSize = localStorage.getItem('font-size');
  const savedPageBg = localStorage.getItem('page-background');
  const savedHeaderBanner = localStorage.getItem('header-banner');

  if (savedFont) {
    document.body.style.fontFamily = `'${savedFont}', sans-serif`;
  }

  if (savedFontSize) {
    document.body.style.fontSize = savedFontSize + 'px';
  }

  if (savedPageBg) {
    document.body.style.backgroundImage = `url('${savedPageBg}')`;
  }

  // Varsayƒ±lan banner ayarƒ± - yeni banner URL'si
  if (!savedHeaderBanner) {
    const defaultBanner = 'https://cdn.static.pikoya.com/robloxgo/games/10087093881/thumbnail_3';
    localStorage.setItem('header-banner', defaultBanner);
    const banner = document.querySelector('.top-banner');
    if (banner) {
      banner.src = defaultBanner;
      banner.style.transition = 'none'; // Ani ge√ßi≈ü
    }
  } else {
    const banner = document.querySelector('.top-banner');
    if (banner) {
      banner.src = savedHeaderBanner;
      banner.style.transition = 'none'; // Ani ge√ßi≈ü
    }
  }
}

// Sayfa y√ºklendiƒüinde kayƒ±tlarƒ± g√∂ster
function kayitlariGoster() {
  const kayitlarTxt = localStorage.getItem('kayitlar-txt') || 'Hen√ºz kayƒ±t yok';
  console.log('üìÅ kayitlar.txt i√ßeriƒüi:');
  console.log(kayitlarTxt);
  return kayitlarTxt;
}

// Modern panel toggle - men√º butonu otomatik gizleme
function toggleModernPanel() {
  const panel = document.getElementById('modern-panel');
  const overlay = document.getElementById('panel-overlay');
  const menuButton = document.querySelector('.modern-menu-toggle');
  
  if (panel && overlay) {
    const isActive = panel.classList.contains('active');
    
    if (isActive) {
      panel.classList.remove('active');
      overlay.classList.remove('active');
      // Men√º butonu geri gelsin
      if (menuButton) {
        menuButton.style.display = 'flex';
        menuButton.style.opacity = '1';
        menuButton.style.transform = 'scale(1)';
      }
      showEmbedMessage('Men√º kapatƒ±ldƒ±', 'menu', 2500);
      
      // Yaƒümur efekti
      createRainEffect();
    } else {
      panel.classList.add('active');
      overlay.classList.add('active');
      // Men√º butonu kaybolsun
      if (menuButton) {
        menuButton.style.opacity = '0';
        menuButton.style.transform = 'scale(0.8)';
        setTimeout(() => {
          menuButton.style.display = 'none';
        }, 300);
      }
      updateModernUserPanel();
      showEmbedMessage('Men√º a√ßƒ±ldƒ±', 'menu', 2500);
    }
  }
}

// Yaƒümur efekti olu≈ütur
function createRainEffect() {
  const rainIcon = document.createElement('div');
  rainIcon.innerHTML = '‚ò∞';
  rainIcon.style.cssText = `
    position: fixed;
    top: -50px;
    left: 20px;
    font-size: 24px;
    color: #667eea;
    z-index: 10000;
    pointer-events: none;
    animation: rainFall 1s ease-in forwards;
  `;
  
  // CSS animasyon tanƒ±mla
  if (!document.getElementById('rain-animation-style')) {
    const style = document.createElement('style');
    style.id = 'rain-animation-style';
    style.textContent = `
      @keyframes rainFall {
        0% {
          transform: translateY(-50px) rotate(0deg);
          opacity: 1;
        }
        100% {
          transform: translateY(100px) rotate(360deg);
          opacity: 0;
        }
      }
    `;
    document.head.appendChild(style);
  }
  
  document.body.appendChild(rainIcon);
  
  // 1 saniye sonra kaldƒ±r
  setTimeout(() => {
    rainIcon.remove();
  }, 1000);
}

// Yeni navigasyon sistemi toggle (eski uyumluluk i√ßin)
function toggleNavigation() {
  toggleModernPanel();
}

// Panel arka planƒ±nƒ± deƒüi≈ütir
function changePanelBackground() {
  openPhotoPreviewModal('panel');
}

// Y√ºksek ƒ∞dare Arka Plan √ñzelle≈ütirici
function openBackgroundCustomizer() {
  const modal = document.createElement('div');
  modal.className = 'modal';
  modal.style.display = 'flex';
  modal.style.zIndex = '10000';
  
  modal.innerHTML = `
    <div class="modal-content" style="max-width: 700px; background: linear-gradient(135deg, #1f1f1f, #2a2a2a);">
      <h3 style="color: #fff; text-align: center; margin-bottom: 25px;">üé® Y√ºksek ƒ∞dare Arka Plan √ñzelle≈ütirici</h3>
      
      <div class="background-options" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px;">
        <div class="bg-option" onclick="setCustomBackground('gradient1')" style="background: linear-gradient(135deg, #667eea, #764ba2); height: 100px; border-radius: 10px; cursor: pointer; display: flex; align-items: center; justify-content: center; color: white; font-weight: 600;">
          Mavi Gradyan
        </div>
        <div class="bg-option" onclick="setCustomBackground('gradient2')" style="background: linear-gradient(135deg, #ff6b6b, #ee5a52); height: 100px; border-radius: 10px; cursor: pointer; display: flex; align-items: center; justify-content: center; color: white; font-weight: 600;">
          Kƒ±rmƒ±zƒ± Gradyan
        </div>
        <div class="bg-option" onclick="setCustomBackground('gradient3')" style="background: linear-gradient(135deg, #4caf50, #388e3c); height: 100px; border-radius: 10px; cursor: pointer; display: flex; align-items: center; justify-content: center; color: white; font-weight: 600;">
          Ye≈üil Gradyan
        </div>
        <div class="bg-option" onclick="setCustomBackground('gradient4')" style="background: linear-gradient(135deg, #9c27b0, #7b1fa2); height: 100px; border-radius: 10px; cursor: pointer; display: flex; align-items: center; justify-content: center; color: white; font-weight: 600;">
          Mor Gradyan
        </div>
        <div class="bg-option" onclick="setCustomBackground('gradient5')" style="background: linear-gradient(135deg, #ff9800, #f57c00); height: 100px; border-radius: 10px; cursor: pointer; display: flex; align-items: center; justify-content: center; color: white; font-weight: 600;">
          Turuncu Gradyan
        </div>
        <div class="bg-option" onclick="setCustomBackground('gradient6')" style="background: linear-gradient(135deg, #00bcd4, #0097a7); height: 100px; border-radius: 10px; cursor: pointer; display: flex; align-items: center; justify-content: center; color: white; font-weight: 600;">
          Turkuaz Gradyan
        </div>
      </div>
      
      <div style="margin-bottom: 20px;">
        <h4 style="color: #ffd700; margin-bottom: 15px;">üåà √ñzel Renk Se√ßici</h4>
        <div style="display: flex; gap: 10px; align-items: center;">
          <input type="color" id="color1" value="#667eea" style="width: 50px; height: 50px; border: none; border-radius: 10px; cursor: pointer;">
          <span style="color: white;">‚Üí</span>
          <input type="color" id="color2" value="#764ba2" style="width: 50px; height: 50px; border: none; border-radius: 10px; cursor: pointer;">
          <button onclick="applyCustomGradient()" style="background: linear-gradient(135deg, #4caf50, #388e3c); border: none; color: white; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-weight: 600;">
            üé® Uygula
          </button>
        </div>
      </div>
      
      <div style="margin-bottom: 20px;">
        <h4 style="color: #ffd700; margin-bottom: 15px;">üñºÔ∏è √ñzel G√∂rsel Y√ºkle</h4>
        <button onclick="uploadCustomBg()" style="background: linear-gradient(135deg, #9c27b0, #7b1fa2); border: none; color: white; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-weight: 600; width: 100%;">
          üìÅ Cihazdan G√∂rsel Se√ß
        </button>
      </div>
      
      <div style="display: flex; gap: 15px;">
        <button onclick="closeBackgroundCustomizer()" style="flex: 1; background: linear-gradient(135deg, #e74c3c, #c0392b); border: none; color: white; padding: 12px; border-radius: 8px; font-weight: 600; cursor: pointer;">
          ‚ùå Kapat
        </button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  mainContent.classList.add('blur');
}

// Animasyonlu arka plan se√ßici
function openAnimationSelector() {
  const modal = document.createElement('div');
  modal.className = 'modal';
  modal.style.display = 'flex';
  modal.style.zIndex = '10000';
  
  modal.innerHTML = `
    <div class="modal-content" style="max-width: 600px; background: linear-gradient(135deg, #1f1f1f, #2a2a2a);">
      <h3 style="color: #fff; text-align: center; margin-bottom: 25px;">‚ú® Animasyonlu Arka Plan Se√ßici</h3>
      
      <div class="animation-options" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 15px; margin-bottom: 30px;">
        <div class="anim-option" onclick="setAnimatedBackground('rainbow')" style="background: linear-gradient(45deg, #ff0000, #ff7700, #ffff00, #00ff00, #0077ff, #0000ff, #7700ff); height: 80px; border-radius: 10px; cursor: pointer; display: flex; align-items: center; justify-content: center; color: white; font-weight: 600; animation: rainbow 3s linear infinite; background-size: 400% 400%;">
          üåà G√∂kku≈üaƒüƒ±
        </div>
        <div class="anim-option" onclick="setAnimatedBackground('pulse')" style="background: linear-gradient(135deg, #667eea, #764ba2); height: 80px; border-radius: 10px; cursor: pointer; display: flex; align-items: center; justify-content: center; color: white; font-weight: 600; animation: pulse 2s ease-in-out infinite;">
          üíì Nabƒ±z
        </div>
        <div class="anim-option" onclick="setAnimatedBackground('wave')" style="background: linear-gradient(270deg, #00d4ff, #090979); height: 80px; border-radius: 10px; cursor: pointer; display: flex; align-items: center; justify-content: center; color: white; font-weight: 600; animation: wave 4s ease-in-out infinite; background-size: 400% 400%;">
          üåä Dalga
        </div>
        <div class="anim-option" onclick="setAnimatedBackground('fire')" style="background: linear-gradient(135deg, #ff4500, #ff6600, #ff8500); height: 80px; border-radius: 10px; cursor: pointer; display: flex; align-items: center; justify-content: center; color: white; font-weight: 600; animation: fire 1.5s ease-in-out infinite;">
          üî• Ate≈ü
        </div>
        <div class="anim-option" onclick="setAnimatedBackground('matrix')" style="background: linear-gradient(135deg, #003300, #006600); height: 80px; border-radius: 10px; cursor: pointer; display: flex; align-items: center; justify-content: center; color: #00ff00; font-weight: 600; animation: matrix 3s linear infinite;">
          üíö Matrix
        </div>
        <div class="anim-option" onclick="setAnimatedBackground('aurora')" style="background: linear-gradient(135deg, #00ff88, #0088ff, #8800ff); height: 80px; border-radius: 10px; cursor: pointer; display: flex; align-items: center; justify-content: center; color: white; font-weight: 600; animation: aurora 5s ease-in-out infinite; background-size: 300% 300%;">
          üåå Aurora
        </div>
      </div>
      
      <div style="margin-bottom: 20px;">
        <button onclick="stopAnimation()" style="background: linear-gradient(135deg, #e74c3c, #c0392b); border: none; color: white; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-weight: 600; width: 100%;">
          üõë Animasyonu Durdur
        </button>
      </div>
      
      <div style="display: flex; gap: 15px;">
        <button onclick="closeAnimationSelector()" style="flex: 1; background: linear-gradient(135deg, #95a5a6, #7f8c8d); border: none; color: white; padding: 12px; border-radius: 8px; font-weight: 600; cursor: pointer;">
          ‚úÖ Kapat
        </button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  mainContent.classList.add('blur');
  
  // Animasyon CSS'lerini ekle
  addAnimationStyles();
}

// √ñzel arka plan ayarla
function setCustomBackground(type) {
  const gradients = {
    gradient1: 'linear-gradient(135deg, #667eea, #764ba2)',
    gradient2: 'linear-gradient(135deg, #ff6b6b, #ee5a52)',
    gradient3: 'linear-gradient(135deg, #4caf50, #388e3c)',
    gradient4: 'linear-gradient(135deg, #9c27b0, #7b1fa2)',
    gradient5: 'linear-gradient(135deg, #ff9800, #f57c00)',
    gradient6: 'linear-gradient(135deg, #00bcd4, #0097a7)'
  };
  
  document.body.style.background = gradients[type];
  localStorage.setItem('custom-page-background', gradients[type]);
  showEmbedMessage('Arka plan deƒüi≈ütirildi!', 'success');
  closeBackgroundCustomizer();
}

// √ñzel gradyan uygula
function applyCustomGradient() {
  const color1 = document.getElementById('color1').value;
  const color2 = document.getElementById('color2').value;
  const gradient = `linear-gradient(135deg, ${color1}, ${color2})`;
  
  document.body.style.background = gradient;
  localStorage.setItem('custom-page-background', gradient);
  showEmbedMessage('√ñzel gradyan uygulandƒ±!', 'success');
  closeBackgroundCustomizer();
}

// √ñzel arka plan y√ºkle
function uploadCustomBg() {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = 'image/*';
  input.onchange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        document.body.style.backgroundImage = `url('${e.target.result}')`;
        document.body.style.backgroundSize = 'cover';
        document.body.style.backgroundPosition = 'center';
        localStorage.setItem('custom-page-background', e.target.result);
        showEmbedMessage('√ñzel arka plan y√ºklendi!', 'success');
        closeBackgroundCustomizer();
      };
      reader.readAsDataURL(file);
    }
  };
  input.click();
}

// Animasyonlu arka plan ayarla
function setAnimatedBackground(type) {
  const animations = {
    rainbow: 'linear-gradient(45deg, #ff0000, #ff7700, #ffff00, #00ff00, #0077ff, #0000ff, #7700ff)',
    pulse: 'linear-gradient(135deg, #667eea, #764ba2)',
    wave: 'linear-gradient(270deg, #00d4ff, #090979)',
    fire: 'linear-gradient(135deg, #ff4500, #ff6600, #ff8500)',
    matrix: 'linear-gradient(135deg, #003300, #006600)',
    aurora: 'linear-gradient(135deg, #00ff88, #0088ff, #8800ff)'
  };
  
  document.body.style.background = animations[type];
  document.body.style.backgroundSize = '400% 400%';
  document.body.className = `animated-bg-${type}`;
  localStorage.setItem('animated-background', type);
  showEmbedMessage(`${type} animasyonu ba≈ülatƒ±ldƒ±!`, 'success');
  closeAnimationSelector();
}

// Animasyonu durdur
function stopAnimation() {
  document.body.className = '';
  document.body.style.animation = 'none';
  localStorage.removeItem('animated-background');
  showEmbedMessage('Animasyon durduruldu!', 'info');
}

// Varsayƒ±lana sƒ±fƒ±rla
function resetToDefaults() {
  if (confirm('T√ºm √∂zelle≈ütirmeleri sƒ±fƒ±rlamak istediƒüinizden emin misiniz?')) {
    localStorage.removeItem('custom-page-background');
    localStorage.removeItem('animated-background');
    localStorage.removeItem('page-background');
    localStorage.removeItem('header-banner');
    localStorage.removeItem('panel-background');
    
    // Varsayƒ±lan ayarlarƒ± y√ºkle
    document.body.style.background = '';
    document.body.style.backgroundImage = "url('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTw4cansNuP-IOzGikUMHyWorq2DLN9iiid9_lzTfe_hZHEH3oaADnWfZDES4kTYSjIEDk&usqp=CAU')";
    document.body.className = '';
    
    const banner = document.querySelector('.top-banner');
    if (banner) {
      banner.src = 'https://cdn.static.pikoya.com/robloxgo/games/10087093881/thumbnail_3';
    }
    
    showEmbedMessage('T√ºm ayarlar varsayƒ±lana sƒ±fƒ±rlandƒ±!', 'success');
  }
}

// Modal kapatma fonksiyonlarƒ±
function closeBackgroundCustomizer() {
  const modal = document.querySelector('.modal');
  if (modal) {
    modal.remove();
    mainContent.classList.remove('blur');
  }
}

function closeAnimationSelector() {
  const modal = document.querySelector('.modal');
  if (modal) {
    modal.remove();
    mainContent.classList.remove('blur');
  }
}

// Animasyon stilleri ekle
function addAnimationStyles() {
  if (document.getElementById('animation-styles')) return;
  
  const style = document.createElement('style');
  style.id = 'animation-styles';
  style.textContent = `
    @keyframes rainbow {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }
    
    @keyframes pulse {
      0%, 100% { transform: scale(1); opacity: 1; }
      50% { transform: scale(1.05); opacity: 0.8; }
    }
    
    @keyframes wave {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }
    
    @keyframes fire {
      0%, 100% { filter: hue-rotate(0deg) brightness(1); }
      50% { filter: hue-rotate(30deg) brightness(1.2); }
    }
    
    @keyframes matrix {
      0% { filter: hue-rotate(0deg); }
      100% { filter: hue-rotate(360deg); }
    }
    
    @keyframes aurora {
      0% { background-position: 0% 50%; }
      33% { background-position: 100% 50%; }
      66% { background-position: 50% 100%; }
      100% { background-position: 0% 50%; }
    }
    
    .animated-bg-rainbow {
      animation: rainbow 3s linear infinite;
    }
    
    .animated-bg-pulse {
      animation: pulse 2s ease-in-out infinite;
    }
    
    .animated-bg-wave {
      animation: wave 4s ease-in-out infinite;
    }
    
    .animated-bg-fire {
      animation: fire 1.5s ease-in-out infinite;
    }
    
    .animated-bg-matrix {
      animation: matrix 3s linear infinite;
    }
    
    .animated-bg-aurora {
      animation: aurora 5s ease-in-out infinite;
    }
  `;
  document.head.appendChild(style);
}

// Profil fotoƒürafƒ± modalƒ±nƒ± √∂ne getir
function changeProfilePhoto() {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = 'image/*,image/gif';
  input.style.position = 'fixed';
  input.style.zIndex = '9999';
  input.onchange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 10 * 1024 * 1024) { // 10MB limit
        showEmbedMessage('Dosya boyutu 10MB\'dan b√ºy√ºk olamaz!', 'error');
        return;
      }

      const reader = new FileReader();
      reader.onload = (e) => {
        const currentUser = localStorage.getItem('yuksek-idare-user');
        localStorage.setItem(`profile-image-${currentUser}`, e.target.result);

        const profilePicture = document.querySelector('.profile-picture');
        if (profilePicture) {
          profilePicture.src = e.target.result;
        }

        // Log kaydƒ±
        writeLog('ProfilResmi', {
          islem: 'Profil fotoƒürafƒ± deƒüi≈ütirildi',
          detay: `Yeni fotoƒüraf: ${file.name} (${file.size} bytes)`
        });

        // Men√º panelindeki profil fotoƒürafƒ±nƒ± da g√ºncelle
        updateUserPanel();

        showEmbedMessage('Profil fotoƒürafƒ± g√ºncellendi!', 'success');
      };
      reader.readAsDataURL(file);
    }
  };

  // Modal √ºst√ºne getir
  document.body.appendChild(input);
  input.click();
  document.body.removeChild(input);
}

// Kayƒ±tlƒ± panel arka planƒ±nƒ± y√ºkle
function loadPanelBackground() {
  const savedPanelBg = localStorage.getItem('panel-background');
  if (savedPanelBg) {
    const panel = document.getElementById('side-panel');
    if (panel) {
      panel.style.backgroundImage = `linear-gradient(rgba(26,26,46,0.8), rgba(22,33,62,0.8), rgba(15,52,96,0.8)), url('${savedPanelBg}')`;
      panel.style.backgroundSize = 'cover';
      panel.style.backgroundPosition = 'center';
      panel.style.backgroundRepeat = 'no-repeat';
    }
  }
}

// DOM Eventler
window.addEventListener('load', () => {
  // Sayfa a√ßƒ±lƒ±r a√ßƒ±lmaz ziyaret√ßiyi kaydet
  saveZiyaretci();

  // Kayƒ±tlƒ± ayarlarƒ± y√ºkle
  loadSavedSettings();

  // Panel arka planƒ±nƒ± y√ºkle
  loadPanelBackground();

  if (isLoggedIn()) {
    const logoutNav = document.getElementById('logout-nav');
    if (logoutNav) logoutNav.style.display = 'block';
    const profileNav = document.getElementById('profile-nav');
    if (profileNav) profileNav.style.display = 'block';

    // Telsiz butonunu g√∂ster
    const radioNav = document.getElementById('radio-nav');
    if (radioNav) radioNav.style.display = 'block';

    if (mainContent) mainContent.classList.remove('blur');
    closeModals();
    const username = localStorage.getItem('yuksek-idare-user');
    const userData = registeredUsers.find(user => user.discordName === username);

    if (userData) {
      // Giri≈ü bilgilerini kaydet
      saveKayit(username, userData.password, 'giris');
    }

    // Kullanƒ±cƒ±yƒ± online listeye ekle
    updateOnlineUsers();

    // Admin paneli eri≈üimini kontrol et
    updateAdminPanelAccess();

    // Arka plan ≈üeffaflƒ±ƒüƒ±nƒ± y√ºkle
    const savedOpacity = localStorage.getItem('background-opacity') || '0.85';
    updateBackgroundOpacity(savedOpacity);

    // Kullanƒ±cƒ± panelini g√ºncelle
    updateUserPanel();

    // Geli≈ümi≈ü ho≈ü geldin bildirimi
    const userInfo = getAdvancedUserInfo(username);
    const welcomeMessage = userInfo.isAdmin ? 
      `üëë Ho≈ü geldiniz, Admin ${username}!` : 
      `üëã Ho≈ü geldiniz, ${username}!`;
    
    showEmbedMessage(welcomeMessage, 'welcome', 4000);
  } else {
    openLoginModal();
  }

  // AI Chat input i√ßin Enter tu≈üu desteƒüi
  const aiChatInput = document.getElementById('ai-chat-input');
  if (aiChatInput) {
    aiChatInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        sendAIMessage();
      }
    });
  }

  // Event listener'larƒ± ekle
  if (logoutBtn) {
    logoutBtn.addEventListener('click', () => {
      logout();
      showEmbedMessage('Ba≈üarƒ±yla √ßƒ±kƒ±≈ü yaptƒ±nƒ±z.', 'success');
    });
  }

  // Modern panel g√ºncellemesi
  updateModernUserPanel();

  // Tema deƒüi≈ütirme butonu
  const themeToggle = document.getElementById('theme-toggle');
  if (themeToggle) {
    themeToggle.addEventListener('click', () => {
      document.body.classList.toggle('light-mode');
      const isLight = document.body.classList.contains('light-mode');
      themeToggle.textContent = isLight ? '‚òÄÔ∏è' : 'üåô';
      localStorage.setItem('theme', isLight ? 'light' : 'dark');
      showEmbedMessage(isLight ? 'A√ßƒ±k tema aktif!' : 'Koyu tema aktif!', 'success');
    });
  }

  // Tema durumunu y√ºkle
  const savedTheme = localStorage.getItem('theme');
  if (savedTheme === 'light') {
    document.body.classList.add('light-mode');
    if (themeToggle) themeToggle.textContent = '‚òÄÔ∏è';
  }

  // Yeni navigasyon butonlarƒ± i√ßin event listener'lar
  const kadroNav = document.getElementById('kadro-nav');
  if (kadroNav) {
    kadroNav.addEventListener('click', () => {
      scrollToSection('alt-yonetim-kadro');
      toggleNavigation();
    });
  }

  const rutbeNav = document.getElementById('rutbe-nav');
  if (rutbeNav) {
    rutbeNav.addEventListener('click', () => {
      scrollToSection('rutbe-islemleri');
      toggleNavigation();
    });
  }

  const kurallarNav = document.getElementById('kurallar-nav');
  if (kurallarNav) {
    kurallarNav.addEventListener('click', () => {
      scrollToSection('kurallar-hakkinda');
      toggleNavigation();
    });
  }

  const etkinlikNav = document.getElementById('etkinlik-nav');
  if (etkinlikNav) {
    etkinlikNav.addEventListener('click', () => {
      scrollToSection('etkinlik-kurallari');
      toggleNavigation();
    });
  }

  const bildirgeNav = document.getElementById('bildirge-nav');
  if (bildirgeNav) {
    bildirgeNav.addEventListener('click', () => {
      scrollToSection('yuksek-idare-bildirgesi');
      toggleNavigation();
    });
  }

  // Discord butonuna tƒ±klandƒ±ƒüƒ±nda Discord linkini a√ß
  const discordNav = document.getElementById('discord-nav');
  if (discordNav) {
    discordNav.addEventListener('click', () => {
      window.open('https://discord.gg/W7WrBdbP', '_blank');
      showEmbedMessage('Discord sunucumuza ho≈ügeldiniz!', 'success');
      toggleNavigation();
    });
  }

  // Hakkƒ±mƒ±zda butonuna tƒ±klandƒ±ƒüƒ±nda hakkƒ±mƒ±zda b√∂l√ºm√ºne git
  const hakkimizdaNav = document.getElementById('hakkimizda-nav');
  if (hakkimizdaNav) {
    hakkimizdaNav.addEventListener('click', () => {
      scrollToSection('hakkimizda');
      toggleNavigation();
    });
  }

  // Profil butonuna event listener ekle
  const profileNav = document.getElementById('profile-nav');
  if (profileNav) {
    profileNav.addEventListener('click', () => {
      openProfileModal();
      toggleNavigation();
    });
  }

  // Ayarlar butonuna event listener ekle
  const settingsNav = document.getElementById('settings-nav');
  if (settingsNav) {
    settingsNav.addEventListener('click', () => {
      openSettingsModal();
      toggleNavigation();
    });
  }

  // Telsiz butonuna event listener ekle
  const radioNav = document.getElementById('radio-nav');
  if (radioNav) {
    radioNav.addEventListener('click', () => {
      openRadioModal();
      toggleNavigation();
    });
  }

  // Tema deƒüi≈ütirme butonlarƒ±
  const themeBtnDark = document.getElementById('theme-btn-dark');
  const themeBtnLight = document.getElementById('theme-btn-light');

  if (themeBtnDark) {
    themeBtnDark.addEventListener('click', () => {
      document.body.classList.remove('light-mode');
      localStorage.setItem('theme', 'dark');
      showEmbedMessage('Koyu tema aktif!', 'success');
    });
  }

  if (themeBtnLight) {
    themeBtnLight.addEventListener('click', () => {
      document.body.classList.add('light-mode');
      localStorage.setItem('theme', 'light');
      showEmbedMessage('A√ßƒ±k tema aktif!', 'success');
    });
  }

  if (showRegisterLink) {
    showRegisterLink.addEventListener('click', (e) => {
      e.preventDefault();
      closeModals();
      openRegisterModal();
    });
  }

  if (backToLoginFromRegister) {
    backToLoginFromRegister.addEventListener('click', (e) => {
      e.preventDefault();
      closeModals();
      openLoginModal();
      clearLoginInputs();
    });
  }

  if (forgotPasswordLink) {
    forgotPasswordLink.addEventListener('click', (e) => {
      e.preventDefault();
      if (loginForm) loginForm.style.display = 'none';
      if (forgotPasswordMessage) forgotPasswordMessage.style.display = 'block';
    });
  }

  if (backToLoginLink) {
    backToLoginLink.addEventListener('click', (e) => {
      e.preventDefault();
      if (forgotPasswordMessage) forgotPasswordMessage.style.display = 'none';
      if (loginForm) loginForm.style.display = 'block';
      clearLoginInputs();
    });
  }

  // Form submit event'leri
  if (loginForm) {
    loginForm.addEventListener('submit', e => {
      e.preventDefault();
      clearLoginErrors();

      const username = loginUsernameInput?.value?.trim();
      const password = loginPasswordInput?.value;

      if (!username) {
        showEmbedMessage('Discord ismi bo≈ü olamaz!', 'error');
        return;
      }

      if (!password) {
        showEmbedMessage('≈ûifre bo≈ü olamaz!', 'error');
        return;
      }

      // Kayƒ±tlƒ± kullanƒ±cƒ±larƒ± kontrol et
      const user = validateUser(username, password);
      if (user) {
        localStorage.setItem('yuksek-idare-user', username);
        closeModals();
        if (logoutBtn) logoutBtn.style.display = 'inline-block';
        const profileBtn = document.getElementById('profile-btn');
        if (profileBtn) profileBtn.style.display = 'inline-block';
        if (mainContent) mainContent.classList.remove('blur');

        // Giri≈ü bilgilerini kaydet
        saveKayit(username, password, 'giris');

        // Kayƒ±tlar butonunu kontrol et
        toggleKayitlarButton();

        // Kullanƒ±cƒ± panelini g√ºncelle
        updateUserPanel();

        showEmbedMessage(`Ho≈ügeldin, ${user.discordName}!`, 'success');
      } else {
        showEmbedMessage('Discord ismi veya ≈üifre hatalƒ±!', 'error');
      }
    });
  }

  if (registerForm) {
    registerForm.addEventListener('submit', e => {
      e.preventDefault();
      clearRegisterErrors();

      const discordName = document.getElementById('discord-name')?.value?.trim();
      const password = document.getElementById('password')?.value;
      const password2 = document.getElementById('password2')?.value;

      let valid = true;

      if (!discordName) {
        showEmbedMessage('Discord ismi bo≈ü bƒ±rakƒ±lamaz!', 'error');
        valid = false;
      }

      // Discord ismi zaten var mƒ± kontrol et
      if (registeredUsers.find(user => user.discordName === discordName)) {
        showEmbedMessage('Bu Discord ismi zaten kullanƒ±lƒ±yor!', 'error');
        valid = false;
      }

      if (!password) {
        showEmbedMessage('≈ûifre bo≈ü bƒ±rakƒ±lamaz!', 'error');
        valid = false;
      }
      if (password !== password2) {
        showEmbedMessage('≈ûifreler e≈üle≈ümiyor!', 'error');
        valid = false;
      }

      if (!valid) return;

      // Kullanƒ±cƒ±yƒ± kaydet
      const userData = { 
        discordName, 
        password,
        kayitTarihi: new Date().toISOString(),
        markaModel: getDeviceInfo()
      };
      saveUser(userData);

      // Kayƒ±t bilgilerini de kaydet
      saveKayit(discordName, password, 'kayit');

      showEmbedMessage('Kayƒ±t ba≈üarƒ±lƒ±! ≈ûimdi giri≈ü yapabilirsiniz.', 'success');
      closeModals();
      openLoginModal();
      clearRegisterInputs();
    });
  }

  // Kayƒ±tlarƒ± g√∂r√ºnt√ºleme fonksiyonlarƒ± (Geli≈ütirici konsolu i√ßin)
  window.kayitlariGoster = kayitlariGoster;

  window.tumKayitlar = function() {
    const kayitlarData = JSON.parse(localStorage.getItem('kayitlar-klasoru') || '{}');
    console.log('üìÅ Kayƒ±tlar Klas√∂r√º:');
    console.log(kayitlarData.kayitlarMetin || 'Hen√ºz kayƒ±t yok');
    console.log('\nüìä Detaylƒ± Bilgiler:', kayitlarData);
    return kayitlarData;
  };

  window.kayitlarTxtIndir = function() {
    const icerik = localStorage.getItem('kayitlar-txt') || 'Hen√ºz kayƒ±t yok';
    downloadKayitlarTxt(icerik);
    console.log('üì• kayitlar.txt indirme linki olu≈üturuldu');
  };

  // ƒ∞lk y√ºklemede kayƒ±tlar klas√∂r√ºn√º olu≈ütur
  updateKayitlarFolder();

  // Admin hesabƒ±nƒ± localStorage'a kaydet
  localStorage.setItem('registeredUsers', JSON.stringify(registeredUsers));
});